# Generated by ariadne-codegen
# Source: queries.async.graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .fragments import ProductFields


class GetBalancesForCpty(BaseModel):
    account_summaries_for_cpty: "GetBalancesForCptyAccountSummariesForCpty" = Field(
        alias="accountSummariesForCpty"
    )


class GetBalancesForCptyAccountSummariesForCpty(BaseModel):
    snapshot_ts: Any = Field(alias="snapshotTs")
    by_account: List["GetBalancesForCptyAccountSummariesForCptyByAccount"] = Field(
        alias="byAccount"
    )


class GetBalancesForCptyAccountSummariesForCptyByAccount(BaseModel):
    balances: List["GetBalancesForCptyAccountSummariesForCptyByAccountBalances"]


class GetBalancesForCptyAccountSummariesForCptyByAccountBalances(BaseModel):
    product: Optional[
        "GetBalancesForCptyAccountSummariesForCptyByAccountBalancesProduct"
    ]
    amount: Optional[Any]


class GetBalancesForCptyAccountSummariesForCptyByAccountBalancesProduct(ProductFields):
    pass


GetBalancesForCpty.model_rebuild()
GetBalancesForCptyAccountSummariesForCpty.model_rebuild()
GetBalancesForCptyAccountSummariesForCptyByAccount.model_rebuild()
GetBalancesForCptyAccountSummariesForCptyByAccountBalances.model_rebuild()
