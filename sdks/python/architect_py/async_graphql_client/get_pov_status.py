# Generated by ariadne-codegen
# Source: queries.async.graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AlgoRunningStatus


class GetPovStatus(BaseModel):
    pov_status: List["GetPovStatusPovStatus"] = Field(alias="povStatus")


class GetPovStatusPovStatus(BaseModel):
    order_id: Any = Field(alias="orderId")
    order: Optional["GetPovStatusPovStatusOrder"]
    creation_time: Any = Field(alias="creationTime")
    status: AlgoRunningStatus
    fraction_complete: Optional[float] = Field(alias="fractionComplete")
    realized_volume_frac: Optional[Any] = Field(alias="realizedVolumeFrac")
    market_volume: Any = Field(alias="marketVolume")
    quantity_filled: Any = Field(alias="quantityFilled")


class GetPovStatusPovStatusOrder(BaseModel):
    name: str
    order_id: Any = Field(alias="orderId")
    market_id: Any = Field(alias="marketId")
    dir: Any
    target_volume_frac: Any = Field(alias="targetVolumeFrac")
    min_order_quantity: Any = Field(alias="minOrderQuantity")
    max_quantity: Any = Field(alias="maxQuantity")
    end_time: Any = Field(alias="endTime")
    account_id: Optional[Any] = Field(alias="accountId")
    take_through_frac: Optional[Any] = Field(alias="takeThroughFrac")


GetPovStatus.model_rebuild()
GetPovStatusPovStatus.model_rebuild()
