schema {
  query: QueryRoot
}

enum MinOrderQuantityUnit {
  BASE
  QUOTE
}

scalar AccountName

"""
  Date in the proleptic Gregorian calendar (without time zone).
  
  Represents a description of the date (as used for birthdays, for example).
  It cannot represent an instant on the time-line.
  
  [`Date` scalar][1] compliant.
  
  See also [`chrono::NaiveDate`][2] for details.
  
  [1]: https://graphql-scalars.dev/docs/scalars/date
  [2]: https://docs.rs/chrono/latest/chrono/naive/struct.NaiveDate.html
"""
scalar Date

"""
  Combined date and time (with time zone) in [RFC 3339][0] format.
  
  Represents a description of an exact instant on the time-line (such as the
  instant that a user account was created).
  
  [`DateTime` scalar][1] compliant.
  
  See also [`chrono::DateTime`][2] for details.
  
  [0]: https://datatracker.ietf.org/doc/html/rfc3339#section-5
  [1]: https://graphql-scalars.dev/docs/scalars/date-time
  [2]: https://docs.rs/chrono/latest/chrono/struct.DateTime.html
"""
scalar DateTime

"""
  128 bit representation of a fixed-precision decimal number.
  
  The finite set of values of `Decimal` scalar are of the form
  m / 10<sup>e</sup>, where m is an integer such that
  -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer between 0 and 28
  inclusive.
  
  Always serializes as `String`. But may be deserialized from `Int` and
  `Float` values too. It's not recommended to deserialize from a `Float`
  directly, as the floating point representation may be unexpected.
  
  See also [`rust_decimal`] crate for details.
  
  [`rust_decimal`]: https://docs.rs/rust_decimal
"""
scalar Decimal

"""
  An order side/direction or a trade execution side/direction.
  In GraphQL these are serialized as "buy" or "sell".
"""
scalar Dir

"A venue that provides execution, e.g. CME, CBOE, NYSE, etc."
scalar ExecutionVenue

"""
  Combined date and time (without time zone) in `yyyy-MM-dd HH:mm:ss` format.
  
  See also [`chrono::NaiveDateTime`][1] for details.
  
  [1]: https://docs.rs/chrono/latest/chrono/naive/struct.NaiveDateTime.html
"""
scalar LocalDateTime

"""
  Clock time within a given date (without time zone) in `HH:mm[:ss[.SSS]]`
  format.
  
  All minutes are assumed to have exactly 60 seconds; no attempt is made to
  handle leap seconds (either positive or negative).
  
  [`LocalTime` scalar][1] compliant.
  
  See also [`chrono::NaiveTime`][2] for details.
  
  [1]: https://graphql-scalars.dev/docs/scalars/local-time
  [2]: https://docs.rs/chrono/latest/chrono/naive/struct.NaiveTime.html
"""
scalar LocalTime

"A venue that provides marketdata, e.g. COINBASE, DATABENTO, XIGNITE, etc."
scalar MarketdataVenue

"""
  System-unique, persistent order identifiers
  <!-- py: type=string -->
"""
scalar OrderId

scalar Product

scalar TradableProduct

"""
  Wrapper type around a UUIDv5 for a given namespace.  These types are
  parseable from either the UUIDv5 string representation, or from the
  name itself, as they are 1-1.
"""
scalar UserId

scalar Uuid

type ExecutionInfo {
  symbol: String!
  exchangeSymbol: String
  executionVenue: ExecutionVenue!
  tickSize: Decimal
  stepSize: Decimal!
  minOrderQuantity: Decimal!
  minOrderQuantityUnit: MinOrderQuantityUnit!
  isDelisted: Boolean!
  initialMargin: Decimal
  maintenanceMargin: Decimal
}

type ProductInfo {
  symbol: String!
  productType: String!
  underlying: Product
  multiplier: Decimal
  derivativeKind: String
  firstNoticeDate: Date
  primaryVenue: String
  priceDisplayFormat: String
  spreadLegs: [SpreadLeg!]
  easyToBorrow: Boolean
}

type QueryRoot {
  version: String!
  "Information about current authenticated user, API keys, etc."
  user: UserQueryRoot!
  symbology: SymbologyQueryRoot!
}

type SpreadLeg {
  product: Product!
  """
  Some spreads have different ratios for their legs, like buy 1 A, sell 2 B, buy 1 C;
  We would represent that with quantities in the legs: 1, -2, 1
  """
  quantity: Decimal!
}

type SymbologyQueryRoot {
  "Given a series symbol, e.g. \"ES CME Futures\", return the related futures, e.g. [\"ES 20250321 CME Future\", ...]"
  futuresSeries(seriesSymbol: String!): [String!]!
  executionInfo(symbol: TradableProduct!, executionVenue: ExecutionVenue!): ExecutionInfo!
  executionInfos(symbols: [TradableProduct!], executionVenue: ExecutionVenue): [ExecutionInfo!]!
  productInfo(symbol: String!): ProductInfo
  productInfos(symbols: [String!]): [ProductInfo!]!
  searchSymbols(searchString: String, executionVenue: ExecutionVenue, executionVenues: [ExecutionVenue!], offset: Int, limit: Int, includeExpired: Boolean, sortAlphabetically: Boolean): [TradableProduct!]!
}

type UserQueryRoot {
  userId: UserId!
  userEmail: String!
  firstName: String
  lastName: String
  canDebugAsUser: Boolean!
  debuggingAsUser: String
}