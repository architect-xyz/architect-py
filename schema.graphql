schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: SubscriptionRoot
}

enum CancelStatus {
  PENDING
  ACKED
  REJECTED
  OUT
}

enum CandleWidth {
  ONE_SECOND
  FIVE_SECOND
  ONE_MINUTE
  FIFTEEN_MINUTE
  ONE_HOUR
  ONE_DAY
}

enum FillKind {
  NORMAL
  REVERSAL
  CORRECTION
}

enum MinOrderQuantityUnit {
  BASE
  QUOTE
}

enum OrderSource {
  API
  GUI
  ALGO
  RECONCILED
  CLI
  TELEGRAM
  OTHER
}

enum OrderStatus {
  PENDING
  OPEN
  REJECTED
  OUT
  CANCELING
  CANCELED
  STALE
}

enum OrderType {
  LIMIT
  STOP_LOSS_LIMIT
  TAKE_PROFIT_LIMIT
}

enum SortTickersBy {
  VOLUME_DESC
  CHANGE_ASC
  CHANGE_DESC
  ABS_CHANGE_DESC
}

enum TimeInForce {
  GTC
  GTD
  DAY
  IOC
  FOK
}

scalar AccountName

"""
  Date in the proleptic Gregorian calendar (without time zone).

  Represents a description of the date (as used for birthdays, for example).
  It cannot represent an instant on the time-line.

  [`Date` scalar][1] compliant.

  See also [`chrono::NaiveDate`][2] for details.

  [1]: https://graphql-scalars.dev/docs/scalars/date
  [2]: https://docs.rs/chrono/latest/chrono/naive/struct.NaiveDate.html
"""
scalar Date

"""
  Combined date and time (with time zone) in [RFC 3339][0] format.

  Represents a description of an exact instant on the time-line (such as the
  instant that a user account was created).

  [`DateTime` scalar][1] compliant.

  See also [`chrono::DateTime`][2] for details.

  [0]: https://datatracker.ietf.org/doc/html/rfc3339#section-5
  [1]: https://graphql-scalars.dev/docs/scalars/date-time
  [2]: https://docs.rs/chrono/latest/chrono/struct.DateTime.html
"""
scalar DateTime

"""
  128 bit representation of a fixed-precision decimal number.

  The finite set of values of `Decimal` scalar are of the form
  m / 10<sup>e</sup>, where m is an integer such that
  -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer between 0 and 28
  inclusive.

  Always serializes as `String`. But may be deserialized from `Int` and
  `Float` values too. It's not recommended to deserialize from a `Float`
  directly, as the floating point representation may be unexpected.

  See also [`rust_decimal`] crate for details.

  [`rust_decimal`]: https://docs.rs/rust_decimal
"""
scalar Decimal

"""
  An order side/direction or a trade execution side/direction.
  In GraphQL these are serialized as "buy" or "sell".
"""
scalar Dir

"A venue that provides execution, e.g. CME, CBOE, NYSE, etc."
scalar ExecutionVenue

"A venue that provides marketdata, e.g. COINBASE, DATABENTO, XIGNITE, etc."
scalar MarketdataVenue

"System-unique, persistent order identifiers"
scalar OrderId

scalar Product

scalar TradableProduct

"""
  Wrapper type around a UUIDv5 for a given namespace.  These types are
  parseable from either the UUIDv5 string representation, or from the
  name itself, as they are 1-1.
"""
scalar UserId

scalar Uuid

type AberrantFill {
  fillId: Uuid!
  fillKind: FillKind
  executionVenue: ExecutionVenue!
  exchangeFillId: String
  orderId: OrderId
  trader: UserId
  account: Uuid
  symbol: String
  dir: Dir
  quantity: Decimal
  price: Decimal
  fee: Decimal
  feeCurrency: String
  recvTime: DateTime
  tradeTime: DateTime
}

type Account {
  id: Uuid!
  name: AccountName!
}

type AccountBalance {
  product: Product!
  balance: Decimal!
}

"Set of flags for account permissions"
type AccountPermissions {
  list: Boolean!
  view: Boolean!
  trade: Boolean!
  reduceOrClose: Boolean!
  setLimits: Boolean!
}

type AccountPosition {
  symbol: TradableProduct!
  quantity: Decimal!
  tradeTime: DateTime
  costBasis: Decimal
  breakEvenPrice: Decimal
  liquidationPrice: Decimal
}

type AccountSummary {
  account: Uuid!
  timestamp: DateTime!
  balances: [AccountBalance!]!
  positions: [AccountPosition!]!
  unrealizedPnl: Decimal
  realizedPnl: Decimal
  equity: Decimal
  yesterdayEquity: Decimal
  cashExcess: Decimal
  purchasingPower: Decimal
  totalMargin: Decimal
  positionMargin: Decimal
}

type AccountWithPermissions {
  account: Account!
  trader: UserId!
  permissions: AccountPermissions!
}

type AdminMutationRoot {
  debugAsUser(user: String!): Boolean!
  stopDebuggingAsUser: Boolean!
}

type ApiKey {
  subject: String!
  created: DateTime!
  apiKey: String!
  apiSecret: String!
}

type Cancel {
  cancelId: Uuid!
  orderId: OrderId!
  recvTime: DateTime
  status: CancelStatus!
  rejectReason: String
}

type CancelReject {
  cancelId: Uuid!
  orderId: OrderId!
  message: String
}

type Candle {
  symbol: String!
  timestamp: DateTime
  width: CandleWidth!
  open: Decimal
  high: Decimal
  low: Decimal
  close: Decimal
  volume: Decimal!
  buyVolume: Decimal!
  sellVolume: Decimal!
  midOpen: Decimal
  midClose: Decimal
  midHigh: Decimal
  midLow: Decimal
  bidOpen: Decimal
  bidClose: Decimal
  bidHigh: Decimal
  bidLow: Decimal
  askOpen: Decimal
  askClose: Decimal
  askHigh: Decimal
  askLow: Decimal
}

type CmeProductGroupInfo {
  seriesSymbol: String!
  productName: String
  url: String
  category: String
  subCategory: String
  clearingSymbol: String
  settleMethod: String
  globexSchedule: String
  mainFraction: Int
  subfraction: String
}

type ConfigQueryRoot {
  "List marketdata venues that are configured"
  marketdataVenues: [MarketdataVenue!]!
}

type ExchangeSymbologyQueryRoot {
  cmeProductGroupInfo(seriesSymbol: String!): CmeProductGroupInfo
  "Get all CME product group infos, or filtered by series symbols if specified, e.g. [\"ES\", \"NQ\", \"CL\"]"
  cmeProductGroupInfos(seriesSymbols: [String!]): [CmeProductGroupInfo!]!
}

type ExecutionInfo {
  symbol: String!
  executionVenue: ExecutionVenue!
  tickSize: Decimal
  stepSize: Decimal!
  minOrderQuantity: Decimal!
  minOrderQuantityUnit: MinOrderQuantityUnit!
  isDelisted: Boolean!
  initialMargin: Decimal
  maintenanceMargin: Decimal
}

type Fill {
  fillId: Uuid!
  fillKind: FillKind!
  executionVenue: ExecutionVenue!
  exchangeFillId: String
  orderId: OrderId
  trader: UserId
  account: Uuid
  symbol: String!
  dir: Dir!
  quantity: Decimal!
  price: Decimal!
  fee: Decimal
  feeCurrency: String
  recvTime: DateTime
  tradeTime: DateTime
}

type FolioQueryRoot {
  accountSummary(account: String!): AccountSummary!
  accountSummaries(trader: String, accounts: [String!]): [AccountSummary!]!
  accountHistory(venue: ExecutionVenue, account: String!, fromInclusive: DateTime, toExclusive: DateTime): [AccountSummary!]!
  historicalFills(venue: ExecutionVenue, account: String, trader: String, orderId: OrderId, fromInclusive: DateTime, toExclusive: DateTime, limit: Int): HistoricalFillsResponse!
  historicalOrders(orderIds: [OrderId!], venue: ExecutionVenue, account: String, trader: String, parentOrderId: OrderId, fromInclusive: DateTime, toExclusive: DateTime, limit: Int): [Order!]!
}

type GqlOrderReject {
  orderId: OrderId!
  reason: String!
  message: String
}

type HistoricalFillsResponse {
  fills: [Fill!]!
  aberrantFills: [AberrantFill!]!
}

type L2Book {
  timestamp: DateTime
  bids: [L2BookLevel!]!
  asks: [L2BookLevel!]!
}

type L2BookLevel {
  price: Decimal!
  size: Decimal!
}

type MarketStatus {
  symbol: String!
  isTrading: Boolean
  isQuoting: Boolean
}

type MarketdataQueryRoot {
  historicalCandles(venue: MarketdataVenue!, symbol: String!, candleWidth: CandleWidth!, start: DateTime!, end: DateTime!): [Candle!]!
  l2BookSnapshot(venue: MarketdataVenue, symbol: String!): L2Book!
  ticker(venue: MarketdataVenue, symbol: String!): Ticker!
  tickers(venue: MarketdataVenue!, symbols: [String!], offset: Int, limit: Int, sortBy: SortTickersBy): [Ticker!]!
  marketStatus(venue: MarketdataVenue, symbol: String!): MarketStatus!
}

type MutationRoot {
  admin: AdminMutationRoot!
  user: UserMutationRoot!
  oms: OmsMutationRoot!
}

type OmsMutationRoot {
  placeOrder(id: OrderId, symbol: String!, dir: Dir!, quantity: Decimal!, trader: String, account: String, orderType: OrderType!, limitPrice: Decimal, postOnly: Boolean, triggerPrice: Decimal, timeInForce: TimeInForce!, goodTilDate: DateTime, executionVenue: ExecutionVenue): Order!
  cancelOrder(orderId: OrderId!): Cancel!
  cancelAllOrders(trader: String, account: String, executionVenue: String): Boolean!
}

type OmsQueryRoot {
  openOrders(venue: ExecutionVenue, account: String, trader: String, symbol: String, parentOrderId: OrderId, orderIds: [OrderId!]): [Order!]!
  pendingCancels(venue: ExecutionVenue, account: String, trader: String, symbol: String, cancelIds: [Uuid!]): [Cancel!]!
}

type Order {
  id: OrderId!
  parentId: OrderId
  recvTime: DateTime
  status: OrderStatus!
  rejectReason: String
  rejectMessage: String
  symbol: String!
  trader: UserId!
  account: Uuid!
  dir: Dir!
  quantity: Decimal!
  filledQuantity: Decimal!
  averageFillPrice: Decimal
  orderType: OrderType!
  limitPrice: Decimal
  postOnly: Boolean
  triggerPrice: Decimal
  timeInForce: TimeInForce!
  "Only set for GTD orders"
  goodTilDate: DateTime
  source: OrderSource!
  executionVenue: ExecutionVenue!
}

type OrderAck {
  orderId: OrderId!
}

type OrderCanceled {
  orderId: OrderId!
  cancelId: Uuid
}

type OrderCanceling {
  orderId: OrderId!
  cancelId: Uuid
}

type OrderOut {
  orderId: OrderId!
}

type OrderStale {
  orderId: OrderId!
}

type ProductInfo {
  symbol: String!
  productType: String!
  underlying: Product
  multiplier: Decimal
  expiration: DateTime
  derivativeKind: String
  firstNoticeDate: Date
  primaryVenue: String
  priceDisplayFormat: String
}

type QueryRoot {
  version: String!
  config: ConfigQueryRoot!
  "Information about current authenticated user, API keys, etc."
  user: UserQueryRoot!
  symbology: SymbologyQueryRoot!
  marketdata: MarketdataQueryRoot!
  oms: OmsQueryRoot!
  folio: FolioQueryRoot!
}

type SubscriptionRoot {
  candles(venue: MarketdataVenue!, symbol: String!, candleWidths: [CandleWidth!]): Candle!
  "Subscribe to only the current candle.  The candle will update on every trade, or every `tick_period_ms` if specified."
  currentCandles(venue: MarketdataVenue!, symbol: String!, candleWidth: CandleWidth!, tickPeriodMs: Int): Candle!
  "Listen to orderflow events."
  orderflow(executionVenue: ExecutionVenue, trader: String, account: String): Orderflow!
  trades(venue: MarketdataVenue!, symbol: String!): Trade!
}

type SymbologyQueryRoot {
  "Given a series symbol, e.g. \"ES CME Futures\", return the related futures, e.g. [\"ES 20250321 CME Future\", ...]"
  futuresSeries(seriesSymbol: String!): [String!]!
  exchangeSymbology: ExchangeSymbologyQueryRoot!
  executionInfo(symbol: TradableProduct!, executionVenue: ExecutionVenue!): ExecutionInfo!
  executionInfos(symbols: [TradableProduct!], executionVenue: ExecutionVenue): [ExecutionInfo!]!
  productInfo(symbol: String!): ProductInfo
  productInfos(symbols: [String!]): [ProductInfo!]!
  searchSymbols(searchString: String, executionVenue: ExecutionVenue, offset: Int, limit: Int): [TradableProduct!]!
}

type Ticker {
  symbol: String!
  timestamp: DateTime
  bidPrice: Decimal
  bidSize: Decimal
  askPrice: Decimal
  askSize: Decimal
  lastPrice: Decimal
  lastSize: Decimal
  sessionOpen: Decimal
  sessionLow: Decimal
  sessionHigh: Decimal
  sessionVolume: Decimal
  open24h: Decimal
  low24h: Decimal
  high24h: Decimal
  volume24h: Decimal
  volume30d: Decimal
  openInterest: Decimal
  lastSettlementPrice: Decimal
  marketCap: Decimal
  priceToEarnings: Decimal
  epsAdj: Decimal
  sharesOutstandingWeightedAdj: Decimal
  dividend: Decimal
  dividendYield: Decimal
}

type Trade {
  symbol: String!
  timestamp: DateTime
  direction: Dir
  price: Decimal!
  size: Decimal!
}

type UserMutationRoot {
  "Create a session JWT to use for authentication with upstream gRPC services.  Requires the server to be configured for Architect auth federation."
  createJwt: String!
  "Create a new API key"
  createApiKey: ApiKey!
  "Remove an API key"
  removeApiKey(apiKey: String!): Boolean!
  enablePaperTrading: Boolean!
}

type UserQueryRoot {
  userId: UserId!
  userEmail: String!
  canDebugAsUser: Boolean!
  debuggingAsUser: String
  "Get account details by id or name"
  account(id: Uuid, name: AccountName): AccountWithPermissions
  "List user's accounts"
  accounts: [AccountWithPermissions!]!
  "List user's API keys"
  apiKeys: [ApiKey!]!
}

union Orderflow = Order | OrderAck | GqlOrderReject | OrderOut | OrderStale | Cancel | CancelReject | OrderCanceling | OrderCanceled | Fill | AberrantFill

