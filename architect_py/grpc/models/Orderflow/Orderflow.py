# generated by datamodel-codegen:
#   filename:  Orderflow/Orderflow.json

from __future__ import annotations

from typing import Annotated, Union

from msgspec import Meta

from .. import definitions
from ..Oms.Cancel import Cancel
from ..Oms.Order import Order


class OrderPending(Order, omit_defaults=True, tag_field="t", tag="w"):
    pass


class TaggedOrderAck(definitions.OrderAck, omit_defaults=True, tag_field="t", tag="a"):
    pass


class TaggedOrderReject(
    definitions.OrderReject, omit_defaults=True, tag_field="t", tag="r"
):
    pass


class TaggedOrderOut(definitions.OrderOut, omit_defaults=True, tag_field="t", tag="o"):
    pass


class OrderReconciledOut(
    definitions.OrderOut, omit_defaults=True, tag_field="t", tag="ox"
):
    pass


class TaggedOrderStale(
    definitions.OrderStale, omit_defaults=True, tag_field="t", tag="z"
):
    pass


class CancelPending(Cancel, omit_defaults=True, tag_field="t", tag="xc"):
    pass


class TaggedCancelReject(
    definitions.CancelReject, omit_defaults=True, tag_field="t", tag="xr"
):
    pass


class TaggedOrderCanceling(
    definitions.OrderCanceling, omit_defaults=True, tag_field="t", tag="xa"
):
    pass


class TaggedOrderCanceled(
    definitions.OrderCanceled, omit_defaults=True, tag_field="t", tag="xx"
):
    pass


class TaggedModifyPending(
    definitions.ModifyPending, omit_defaults=True, tag_field="t", tag="mp"
):
    pass


class TaggedModifyReject(
    definitions.ModifyReject, omit_defaults=True, tag_field="t", tag="mr"
):
    pass


class TaggedOrderModified(
    definitions.OrderModified, omit_defaults=True, tag_field="t", tag="mm"
):
    pass


class TaggedFill(definitions.Fill, omit_defaults=True, tag_field="t", tag="f"):
    pass


class DescendantFill(definitions.Fill, omit_defaults=True, tag_field="t", tag="df"):
    """
        For parent algos with child algos, the parent algo will also receive copies of fills from its descendants.  The fills will be modified such that their order_id is set to the immediate child algo's order ID.

    For example, suppose algo order A spawns child algo order B, whose suborder O receives fill F.  F's order_id is O.  A should also hear about this fill as a DescendantFill F_desc where F_desc's order_id is B.
    """


class TaggedAberrantFill(
    definitions.AberrantFill, omit_defaults=True, tag_field="t", tag="af"
):
    """
    Fills which we received but couldn't parse fully, return details best effort
    """


Orderflow = Annotated[
    Union[
        OrderPending,
        TaggedOrderAck,
        TaggedOrderReject,
        TaggedOrderOut,
        OrderReconciledOut,
        TaggedOrderStale,
        CancelPending,
        TaggedCancelReject,
        TaggedOrderCanceling,
        TaggedOrderCanceled,
        TaggedModifyPending,
        TaggedModifyReject,
        TaggedOrderModified,
        TaggedFill,
        DescendantFill,
        TaggedAberrantFill,
    ],
    Meta(title="Orderflow"),
]
