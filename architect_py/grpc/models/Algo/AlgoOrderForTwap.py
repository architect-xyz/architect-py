# generated by datamodel-codegen:
#   filename:  Algo/AlgoOrderForTwap.json

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from msgspec import Struct

from .. import definitions


class AlgoOrderForTwap(Struct, omit_defaults=True):
    create_time: datetime
    id: definitions.OrderId
    params: definitions.TwapParams
    status: definitions.AlgoOrderStatus
    status_details: definitions.TwapStatus
    trader: definitions.UserId
    display_symbols: Optional[List[str]] = None
    finish_time: Optional[datetime] = None
    parent_id: Optional[definitions.OrderId] = None
    reject_reason: Optional[str] = None
    working_progress: Optional[float] = None

    # Constructor that takes all field titles as arguments for convenience
    @classmethod
    def new(
        cls,
        create_time: datetime,
        id: definitions.OrderId,
        params: definitions.TwapParams,
        status: definitions.AlgoOrderStatus,
        status_details: definitions.TwapStatus,
        trader: definitions.UserId,
        display_symbols: Optional[List[str]] = None,
        finish_time: Optional[datetime] = None,
        parent_id: Optional[definitions.OrderId] = None,
        reject_reason: Optional[str] = None,
        working_progress: Optional[float] = None,
    ):
        return cls(
            create_time,
            id,
            params,
            status,
            status_details,
            trader,
            display_symbols,
            finish_time,
            parent_id,
            reject_reason,
            working_progress,
        )

    def __str__(self) -> str:
        return f"AlgoOrderForTwap(create_time={self.create_time},id={self.id},params={self.params},status={self.status},status_details={self.status_details},trader={self.trader},display_symbols={self.display_symbols},finish_time={self.finish_time},parent_id={self.parent_id},reject_reason={self.reject_reason},working_progress={self.working_progress})"
