# Generated by ariadne-codegen
# Source: queries.graphql

from datetime import date, datetime
from decimal import Decimal
from typing import Any, List, Optional

from pydantic import Field

from architect_py.scalars import OrderDir

from .base_model import BaseModel
from .enums import CandleWidth, OrderSource, OrderStatus, OrderType, TimeInForce


class AccountSummaryFields(BaseModel):
    account: Any
    timestamp: datetime
    balances: List["AccountSummaryFieldsBalances"]
    positions: List["AccountSummaryFieldsPositions"]
    unrealized_pnl: Optional[Decimal] = Field(alias="unrealizedPnl")
    realized_pnl: Optional[Decimal] = Field(alias="realizedPnl")
    equity: Optional[Decimal]
    yesterday_equity: Optional[Decimal] = Field(alias="yesterdayEquity")
    cash_excess: Optional[Decimal] = Field(alias="cashExcess")
    total_margin: Optional[Decimal] = Field(alias="totalMargin")
    position_margin: Optional[Decimal] = Field(alias="positionMargin")


class AccountSummaryFieldsBalances(BaseModel):
    product: str
    balance: Decimal


class AccountSummaryFieldsPositions(BaseModel):
    symbol: str
    quantity: Decimal
    trade_time: Optional[datetime] = Field(alias="tradeTime")
    cost_basis: Decimal = Field(alias="costBasis")
    break_even_price: Optional[Decimal] = Field(alias="breakEvenPrice")
    liquidation_price: Optional[Decimal] = Field(alias="liquidationPrice")


class CandleFields(BaseModel):
    timestamp: Optional[datetime]
    width: CandleWidth
    open: Optional[Decimal]
    high: Optional[Decimal]
    low: Optional[Decimal]
    close: Optional[Decimal]
    volume: Decimal


class MarketTickerFields(BaseModel):
    symbol: str
    timestamp: Optional[datetime]
    bid_price: Optional[Decimal] = Field(alias="bidPrice")
    bid_size: Optional[Decimal] = Field(alias="bidSize")
    ask_price: Optional[Decimal] = Field(alias="askPrice")
    ask_size: Optional[Decimal] = Field(alias="askSize")
    last_price: Optional[Decimal] = Field(alias="lastPrice")
    last_size: Optional[Decimal] = Field(alias="lastSize")


class OrderFields(BaseModel):
    id: str
    parent_id: Optional[str] = Field(alias="parentId")
    recv_time: Optional[datetime] = Field(alias="recvTime")
    status: OrderStatus
    reject_reason: Optional[str] = Field(alias="rejectReason")
    symbol: str
    trader: str
    account: Any
    dir: OrderDir
    quantity: Decimal
    filled_quantity: Decimal = Field(alias="filledQuantity")
    average_fill_price: Optional[Decimal] = Field(alias="averageFillPrice")
    order_type: OrderType = Field(alias="orderType")
    limit_price: Optional[Decimal] = Field(alias="limitPrice")
    post_only: Optional[bool] = Field(alias="postOnly")
    trigger_price: Optional[Decimal] = Field(alias="triggerPrice")
    time_in_force: TimeInForce = Field(alias="timeInForce")
    good_til_date: Optional[datetime] = Field(alias="goodTilDate")
    source: OrderSource
    execution_venue: str = Field(alias="executionVenue")


class ProductInfoFields(BaseModel):
    typename__: str = Field(alias="__typename")
    symbol: str
    product_type: str = Field(alias="productType")
    underlying: Optional[str]
    multiplier: Optional[Decimal]
    derivative_kind: Optional[str] = Field(alias="derivativeKind")
    first_notice_date: Optional[date] = Field(alias="firstNoticeDate")


AccountSummaryFields.model_rebuild()
CandleFields.model_rebuild()
MarketTickerFields.model_rebuild()
OrderFields.model_rebuild()
ProductInfoFields.model_rebuild()
