# generated by datamodel-codegen:
#   filename:  SubscribeCurrentCandlesRequest.json

from __future__ import annotations
from architect_py.grpc_client.Marketdata.Candle import Candle
from architect_py.grpc_client.request import RequestStream


from enum import Enum
from typing import Annotated, Optional

from msgspec import Meta, Struct


class CandleWidth(int, Enum):
    integer_1 = 1
    integer_2 = 2
    integer_4 = 4
    integer_8 = 8
    integer_16 = 16
    integer_32 = 32


class SubscribeCurrentCandlesRequest(Struct):
    """
    Subscribe to the current candle.  This allows you to display the most recent/building candle live in a UI, for example.
    """

    candle_width: CandleWidth
    symbol: str
    tick_period_ms: Optional[
        Annotated[
            Optional[int],
            Meta(
                description='If None, send the current candle on every trade or candle tick. Otherwise, send a candle every `tick_period_ms`.',
                ge=0,
            ),
        ]
    ] = None
    """
    If None, send the current candle on every trade or candle tick. Otherwise, send a candle every `tick_period_ms`.
    """
    venue: Optional[str] = None

    @staticmethod
    def get_request_helper():
        return request_helper


request_helper = RequestStream(SubscribeCurrentCandlesRequest, Candle, "/json.architect.Marketdata/SubscribeCurrentCandles")

