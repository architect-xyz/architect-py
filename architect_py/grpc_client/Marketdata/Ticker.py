# generated by datamodel-codegen:
#   filename:  Marketdata/Ticker.json

from __future__ import annotations
from datetime import datetime, timezone

from typing import Annotated, Optional

from msgspec import Meta, Struct, field

from .. import definitions


class Ticker(Struct):
    s: Annotated[str, Meta(title='symbol')]
    tn: Annotated[int, Meta(ge=0, title='timestamp_ns')]
    ts: Annotated[int, Meta(title='timestamp')]
    ve: Annotated[str, Meta(title='venue')]
    ap: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='ask_price')]
    ] = None
    as_: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='ask_size')]
    ] = field(name='as', default=None)
    bp: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='bid_price')]
    ] = None
    bs: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='bid_size')]
    ] = None
    dividend: Optional[definitions.DecimalModel] = None
    dividend_yield: Optional[definitions.DecimalModel] = None
    eps_adj: Optional[definitions.DecimalModel] = None
    fr: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='funding_rate')]
    ] = None
    ft: Optional[Annotated[Optional[str], Meta(title='next_funding_time')]] = None
    h: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='high_24h')]
    ] = None
    ip: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='index_price')]
    ] = None
    l: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='low_24h')]
    ] = None
    market_cap: Optional[definitions.DecimalModel] = None
    mp: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='mark_price')]
    ] = None
    o: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='open_24h')]
    ] = None
    oi: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='open_interest')]
    ] = None
    p: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='last_price')]
    ] = None
    price_to_earnings: Optional[definitions.DecimalModel] = None
    q: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='last_size')]
    ] = None
    shares_outstanding_weighted_adj: Optional[definitions.DecimalModel] = None
    sp: Optional[
        Annotated[
            Optional[definitions.DecimalModel], Meta(title='last_settlement_price')
        ]
    ] = None
    v: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='volume_24h')]
    ] = None
    vm: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='volume_30d')]
    ] = None
    xh: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='session_high')]
    ] = None
    xl: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='session_low')]
    ] = None
    xo: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='session_open')]
    ] = None
    xv: Optional[
        Annotated[Optional[definitions.DecimalModel], Meta(title='session_volume')]
    ] = None

    @property
    def symbol(self) -> str:
        return self.s

    @symbol.setter
    def symbol(self, value: str) -> None:
        self.s = value

    @property
    def timestamp_ns(self) -> int:
        return self.tn

    @timestamp_ns.setter
    def timestamp_ns(self, value: int) -> None:
        self.tn = value

    @property
    def timestamp(self) -> int:
        return self.ts

    @timestamp.setter
    def timestamp(self, value: int) -> None:
        self.ts = value

    @property
    def datetime(self) -> datetime:
        return datetime.fromtimestamp(self.ts, tz=timezone.utc)

    @property
    def datetime_local(self) -> datetime:
        return datetime.fromtimestamp(self.ts)

    @property
    def venue(self) -> str:
        return self.ve

    @venue.setter
    def venue(self, value: str) -> None:
        self.ve = value

    @property
    def ask_price(self) -> Optional[definitions.DecimalModel]:
        return self.ap

    @ask_price.setter
    def ask_price(self, value: Optional[definitions.DecimalModel]) -> None:
        self.ap = value

    @property
    def ask_size(self) -> Optional[definitions.DecimalModel]:
        return self.as_

    @ask_size.setter
    def ask_size(self, value: Optional[definitions.DecimalModel]) -> None:
        self.as_ = value

    @property
    def bid_price(self) -> Optional[definitions.DecimalModel]:
        return self.bp

    @bid_price.setter
    def bid_price(self, value: Optional[definitions.DecimalModel]) -> None:
        self.bp = value

    @property
    def bid_size(self) -> Optional[definitions.DecimalModel]:
        return self.bs

    @bid_size.setter
    def bid_size(self, value: Optional[definitions.DecimalModel]) -> None:
        self.bs = value

    @property
    def funding_rate(self) -> Optional[definitions.DecimalModel]:
        return self.fr

    @funding_rate.setter
    def funding_rate(self, value: Optional[definitions.DecimalModel]) -> None:
        self.fr = value

    @property
    def next_funding_time(self) -> Optional[str]:
        return self.ft

    @next_funding_time.setter
    def next_funding_time(self, value: Optional[str]) -> None:
        self.ft = value

    @property
    def high_24h(self) -> Optional[definitions.DecimalModel]:
        return self.h

    @high_24h.setter
    def high_24h(self, value: Optional[definitions.DecimalModel]) -> None:
        self.h = value

    @property
    def index_price(self) -> Optional[definitions.DecimalModel]:
        return self.ip

    @index_price.setter
    def index_price(self, value: Optional[definitions.DecimalModel]) -> None:
        self.ip = value

    @property
    def low_24h(self) -> Optional[definitions.DecimalModel]:
        return self.l

    @low_24h.setter
    def low_24h(self, value: Optional[definitions.DecimalModel]) -> None:
        self.l = value

    @property
    def mark_price(self) -> Optional[definitions.DecimalModel]:
        return self.mp

    @mark_price.setter
    def mark_price(self, value: Optional[definitions.DecimalModel]) -> None:
        self.mp = value

    @property
    def open_24h(self) -> Optional[definitions.DecimalModel]:
        return self.o

    @open_24h.setter
    def open_24h(self, value: Optional[definitions.DecimalModel]) -> None:
        self.o = value

    @property
    def open_interest(self) -> Optional[definitions.DecimalModel]:
        return self.oi

    @open_interest.setter
    def open_interest(self, value: Optional[definitions.DecimalModel]) -> None:
        self.oi = value

    @property
    def last_price(self) -> Optional[definitions.DecimalModel]:
        return self.p

    @last_price.setter
    def last_price(self, value: Optional[definitions.DecimalModel]) -> None:
        self.p = value

    @property
    def last_size(self) -> Optional[definitions.DecimalModel]:
        return self.q

    @last_size.setter
    def last_size(self, value: Optional[definitions.DecimalModel]) -> None:
        self.q = value

    @property
    def last_settlement_price(self) -> Optional[definitions.DecimalModel]:
        return self.sp

    @last_settlement_price.setter
    def last_settlement_price(self, value: Optional[definitions.DecimalModel]) -> None:
        self.sp = value

    @property
    def volume_24h(self) -> Optional[definitions.DecimalModel]:
        return self.v

    @volume_24h.setter
    def volume_24h(self, value: Optional[definitions.DecimalModel]) -> None:
        self.v = value

    @property
    def volume_30d(self) -> Optional[definitions.DecimalModel]:
        return self.vm

    @volume_30d.setter
    def volume_30d(self, value: Optional[definitions.DecimalModel]) -> None:
        self.vm = value

    @property
    def session_high(self) -> Optional[definitions.DecimalModel]:
        return self.xh

    @session_high.setter
    def session_high(self, value: Optional[definitions.DecimalModel]) -> None:
        self.xh = value

    @property
    def session_low(self) -> Optional[definitions.DecimalModel]:
        return self.xl

    @session_low.setter
    def session_low(self, value: Optional[definitions.DecimalModel]) -> None:
        self.xl = value

    @property
    def session_open(self) -> Optional[definitions.DecimalModel]:
        return self.xo

    @session_open.setter
    def session_open(self, value: Optional[definitions.DecimalModel]) -> None:
        self.xo = value

    @property
    def session_volume(self) -> Optional[definitions.DecimalModel]:
        return self.xv

    @session_volume.setter
    def session_volume(self, value: Optional[definitions.DecimalModel]) -> None:
        self.xv = value
