# fmt: off

# mypy: ignore-errors

# Autogenerated from generate_protocol.py

# If you are here for function definitions, please refer to architect_py/async_cline.py
# This file is so that the sync client has good type hinting
# It is not used for anything else
# For maintainers: ensure that the types in this file are correct for correct type hinting


from types import NoneType
import architect_py.graphql_client
from architect_py.graphql_client import *
from architect_py.async_client import *
from httpx import Response
from dns.name import Name


class AsyncClientProtocol:
    def cancel_all_orders(self: Any, **kwargs: Any) -> CancelAllOrdersOms: ...
    def cancel_order(self: Any, order_id: str, **kwargs: Any) -> CancelOrderOms: ...
    def configure_marketdata(self: Any, *, cpty: str, url: str) -> Any: ...
    def create_jwt(self: Any, **kwargs: Any) -> CreateJwtUser: ...
    def execute(self: Any, query: str, operation_name: Optional[str] = None, variables: Optional[dict[str, Any]] = None, **kwargs: Any) -> Response: ...
    def execute_ws(self: Any, query: str, operation_name: Optional[str] = None, variables: Optional[dict[str, Any]] = None, **kwargs: Any) -> AsyncIterator: ...
    def find_markets(self: Any, base: str, venue: str, route: str = 'DIRECT') -> list[str]: ...
    def future_series(self: Any, series_symbol: str, **kwargs: Any) -> FutureSeriesSymbology: ...
    def get_account_summaries(self: Any, venue: Union[str, NoneType, UnsetType] = UNSET, trader: Union[str, NoneType, UnsetType] = UNSET, accounts: Union[list[str], NoneType, UnsetType] = UNSET, **kwargs: Any) -> GetAccountSummariesFolio: ...
    def get_account_summary(self: Any, account: str, venue: Union[str, NoneType, UnsetType] = UNSET, **kwargs: Any) -> GetAccountSummaryFolio: ...
    def get_all_open_orders(self: Any, **kwargs: Any) -> GetAllOpenOrdersOms: ...
    def get_book_snapshot(self: Any, venue: str, symbol: str, **kwargs: Any) -> GetBookSnapshotMarketdata: ...
    def get_cme_first_notice_date(self: Any, market: str) -> Optional[date]: ...
    def get_cme_future_from_root_month_year(self: Any, root: str, month: int, year: int) -> str: ...
    def get_cme_futures_series(self: Any, series: str) -> list[tuple[date, str]]: ...
    def get_data(self: Any, response: Response) -> dict[str, Any]: ...
    def get_execution_info(self: Any, symbol: str, execution_venue: str, **kwargs: Any) -> GetExecutionInfoSymbology: ...
    def get_expiration_from_CME_name(name: str) -> date: ...
    def get_external_l2_book_snapshot(self: Any, market: str) -> ExternalL2BookSnapshot: ...
    def get_fills(self: Any, venue: Union[str, NoneType, UnsetType] = UNSET, account: Union[str, NoneType, UnsetType] = UNSET, order_id: Union[str, NoneType, UnsetType] = UNSET, from_inclusive: Union[datetime, NoneType, UnsetType] = UNSET, to_exclusive: Union[datetime, NoneType, UnsetType] = UNSET, **kwargs: Any) -> GetFillsFolio: ...
    def get_first_notice_date(self: Any, symbol: str, **kwargs: Any) -> GetFirstNoticeDateSymbology: ...
    def get_historical_orders(self: Any, from_inclusive: datetime, to_exclusive: datetime, venue: Union[str, NoneType, UnsetType] = UNSET, account: Union[str, NoneType, UnsetType] = UNSET, parent_order_id: Union[str, NoneType, UnsetType] = UNSET, **kwargs: Any) -> GetHistoricalOrdersFolio: ...
    def get_l3_book_snapshot(self: Any, market: str) -> L3BookSnapshot: ...
    def get_market_snapshot(self: Any, venue: str, symbol: str, **kwargs: Any) -> GetMarketSnapshotMarketdata: ...
    def get_market_snapshots(self: Any, venue: str, symbols: Union[list[str], NoneType, UnsetType] = UNSET, **kwargs: Any) -> GetMarketSnapshotsMarketdata: ...
    def get_open_orders(self: Any, venue: Optional[str] = None, route: Optional[str] = None, cpty: Optional[str] = None) -> Any: ...
    def get_product_info(self: Any, symbol: str, **kwargs: Any) -> GetProductInfoSymbology: ...
    def get_product_infos(self: Any, symbols: list[str], **kwargs: Any) -> GetProductInfosSymbology: ...
    def grpc_channel(self: Any, endpoint: str) -> Any: ...
    def l2_book_snapshot(self: Any, endpoint: str, market_id: str) -> L2BookSnapshot: ...
    def load_and_index_symbology(self: Any, cpty: Optional[str] = None) -> Any: ...
    def place_order(self: Any, symbol: str, dir: OrderDir, quantity: Decimal, order_type: OrderType, time_in_force: TimeInForce, id: Union[str, NoneType, UnsetType] = UNSET, trader: Union[str, NoneType, UnsetType] = UNSET, account: Union[str, NoneType, UnsetType] = UNSET, limit_price: Union[Decimal, NoneType, UnsetType] = UNSET, post_only: Union[bool, NoneType, UnsetType] = UNSET, trigger_price: Union[Decimal, NoneType, UnsetType] = UNSET, good_til_date: Union[datetime, NoneType, UnsetType] = UNSET, execution_venue: Union[str, NoneType, UnsetType] = UNSET, **kwargs: Any) -> PlaceOrderOms: ...
    def refresh_grpc_credentials(self: Any, force: bool = False) -> Optional[str]: ...
    def search_symbols(self: Any, *, execution_venue: str | None | architect_py.graphql_client.base_model.UnsetType = UNSET, marketdata_venue: str | None | architect_py.graphql_client.base_model.UnsetType = UNSET, quote: str | None | architect_py.graphql_client.base_model.UnsetType = UNSET, underlying: str | None | architect_py.graphql_client.base_model.UnsetType = UNSET, max_results: int | None | architect_py.graphql_client.base_model.UnsetType = UNSET, results_offset: int | None | architect_py.graphql_client.base_model.UnsetType = UNSET, search_string: str | None | architect_py.graphql_client.base_model.UnsetType = UNSET, only_favorites: bool | None | architect_py.graphql_client.base_model.UnsetType = UNSET, sort_by_volume_desc: bool | None | architect_py.graphql_client.base_model.UnsetType = UNSET, glob: str | None = None, regex: str | None = None, **kwargs: Any) -> list[str]: ...
    def search_symbols_request(self: Any, sort_by_volume_desc: bool, search_string: Union[str, NoneType, UnsetType] = UNSET, execution_venue: Union[str, NoneType, UnsetType] = UNSET, marketdata_venue: Union[str, NoneType, UnsetType] = UNSET, underlying: Union[str, NoneType, UnsetType] = UNSET, max_results: Union[int, NoneType, UnsetType] = UNSET, results_offset: Union[int, NoneType, UnsetType] = UNSET, **kwargs: Any) -> SearchSymbolsRequestSymbology: ...
    def send_limit_order(self: Any, *, symbol: str, odir: OrderDir, quantity: Decimal, limit_price: Decimal, order_type: OrderType = OrderType.LIMIT, post_only: bool = False, trigger_price: Optional[Decimal] = None, time_in_force: TimeInForce = TimeInForce.DAY, good_til_date: Optional[datetime] = None, price_round_method: Optional[TickRoundMethod] = None, account: Optional[str] = None, trader: Optional[str] = None, execution_venue: Optional[str] = None) -> OrderFields: ...
    def send_market_pro_order(self: Any, *, symbol: str, odir: OrderDir, quantity: Decimal, time_in_force: TimeInForce = TimeInForce.DAY, account: Optional[str] = None, fraction_through_market: Decimal = Decimal('0.001')) -> OrderFields: ...
    def start_session(self: Any) -> Any: ...
    def watch_l2_book(self: Any, endpoint: str, market_id: str) -> AsyncIterator: ...
