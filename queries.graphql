fragment ProductInfoFields on ProductInfo {
  __typename
  symbol
  productType
  underlying
  multiplier
  derivativeKind
  firstNoticeDate
}

fragment OrderFields on Order {
  id
  parentId
  recvTime
  status
  rejectReason
  symbol
  trader
  account
  dir
  quantity
  filledQuantity
  averageFillPrice
  orderType
  limitPrice
  postOnly
  triggerPrice
  timeInForce
  goodTilDate
  source
  executionVenue
}


fragment CandleFields on Candle {
  timestamp
  width
  open
  high
  low
  close
  volume
}

fragment AccountSummaryFields on AccountSummary {
  account
  timestamp
  balances {
    product
    balance
  }
  positions {
    symbol
    position {
      quantity
      tradeTime
      costBasis
      breakEvenPrice
      liquidationPrice
    }
  }
  unrealizedPnl
  realizedPnl
  equity
  yesterdayEquity
  cashExcess
  totalMargin
  positionMargin
}

fragment MarketTickerFields on Ticker {
  symbol
  timestamp
  bidPrice
  bidSize
  askPrice
  askSize
  lastPrice
  lastSize
}



query SearchSymbols($searchString: String, $executionVenue: ExecutionVenue!, $marketdataVenue: MarketdataVenue!, $underlying: String, $maxResults: Int, $resultsOffset: Int, $sortByVolumeDesc: Boolean!) {
  symbology {
    searchSymbols(searchString: $searchString, executionVenue: $executionVenue, marketdataVenue: $marketdataVenue, underlying: $underlying, maxResults: $maxResults, resultsOffset: $resultsOffset, sortByVolumeDesc: $sortByVolumeDesc)
  }
}

query GetProductInfo($symbol: String!) {
  symbology {
    productInfo(symbol: $symbol) {
      ...ProductInfoFields
    }
  }
}

query GetProductInfos($symbols: [String!]!) {
  symbology {
    productInfos(symbols: $symbols) {
      ...ProductInfoFields
    }
  }
}


query GetFirstNoticeDate($symbol: String!) {
  symbology {
    productInfo(symbol: $symbol) {
      firstNoticeDate
    }
  }
}

query GetMarketSnapshot($venue: MarketdataVenue!, $symbol: String!) {
  marketdata {
    ticker(venue: $venue, symbol: $symbol) {
      ...MarketTickerFields
    }
  }
}

query GetMarketSnapshots($venue: MarketdataVenue!, $symbols: [String!]) {
  marketdata{
    tickers(venue: $venue, symbols: $symbols) {
      ...MarketTickerFields
    }
  }
}


query GetAccountSummary($venue: ExecutionVenue, $account: Uuid!) {
  folio {
    accountSummary(venue: $venue, account: $account) {
      ...AccountSummaryFields
    }
  }
}

query GetAccountSummaries($venue: ExecutionVenue, $trader: UserId, $accounts: [Uuid!]) {
  folio {
    accountSummaries(venue: $venue, trader: $trader, accounts: $accounts) {
      ...AccountSummaryFields
    }
  }
}

query GetOpenOrders($venue: ExecutionVenue, $account: Uuid, $trader: UserId, $symbol: String, $parentOrderId: OrderId, $orderIds: [OrderId!]) {
  oms {
    openOrders(venue: $venue, account: $account, trader: $trader, symbol: $symbol, parentOrderId: $parentOrderId, orderIds: $orderIds) {
      ...OrderFields
    }
  }
}

query GetAllOpenOrders {
  oms {
    openOrders {
      ...OrderFields
    }
  }
}

query GetHistoricalOrders($venue: ExecutionVenue, $account: Uuid, $parentOrderId: OrderId, $fromInclusive: DateTime!, $toExclusive: DateTime!) {
  folio {
    historicalOrders(venue: $venue, account: $account, parentOrderId: $parentOrderId, fromInclusive: $fromInclusive, toExclusive: $toExclusive) {
      ...OrderFields
    }
  }
}


# query GetAlgoStatus($orderId: OrderId!) {
#   algoStatus(orderId: $orderId) {
#     orderId
#     order {
#       orderId
#       trader
#       account
#       algo
#       parentOrderId
#       markets
#     }
#     creationTime
#     status
#     lastStatusChange
#     fractionComplete
#   }
# }
# 
# query GetAlgoOrder($orderId: OrderId!) {
#   algoOrder(orderId: $orderId) {
#     orderId
#     trader
#     account
#     algo
#     parentOrderId
#     markets
#   }
# }
# 
# 
# query GetTwapStatus($orderId: OrderId!) {
#   twapStatus(orderId: $orderId) {
#     orderId
#     order {
#       name
#       orderId
#       marketId
#       dir
#       quantity
#       endTime
#       accountId
#       intervalMs
#       rejectLockoutMs
#       takeThroughFrac
#     }
#     creationTime
#     status
#     fractionComplete
#     realizedTwap
#     quantityFilled
#   }
# }
# 
# query GetTwapOrder($orderId: OrderId!) {
#   twapOrder(orderId: $orderId) {
#     name
#     orderId
#     marketId
#     dir
#     quantity
#     endTime
#     accountId
#     intervalMs
#     rejectLockoutMs
#     takeThroughFrac
#   }
# }
# 
# query GetPovStatus($orderId: OrderId!) {
#   povStatus(orderId: $orderId) {
#     orderId
#     order {
#       name
#       orderId
#       marketId
#       dir
#       targetVolumeFrac
#       minOrderQuantity
#       maxQuantity
#       endTime
#       accountId
#       takeThroughFrac
#     }
#     creationTime
#     status
#     fractionComplete
#     realizedVolumeFrac
#     marketVolume
#     quantityFilled
#   }
# }
# 
# query GetPovOrder($orderId: OrderId!) {
#   povOrder(orderId: $orderId) {
#     name
#     orderId
#     marketId
#     dir
#     targetVolumeFrac
#     minOrderQuantity
#     maxQuantity
#     endTime
#     accountId
#     takeThroughFrac
#   }
# }
# 
# 
# query GetSmartOrderRouterStatus($orderId: OrderId!) {
#   smartOrderRouterStatus(orderId: $orderId) {
#     status {
#       orderId
#       order {
#         orderId
#         trader
#         account
#         algo
#         parentOrderId
#         markets
#       }
#       creationTime
#       status
#       lastStatusChange
#       fractionComplete
#     }
#     order {
#       orderId
#       markets {
#         id
#       }
#       # base
#       # quote
#       dir
#       limitPrice
#       targetSize
#       executionTimeLimitMs
#       parentOrderId
#     }
#   }
# }
# 
# 
# query GetSmartOrderRouterOrder($orderId: OrderId!) {
#   smartOrderRouterOrder(orderId: $orderId) {
#     orderId
#     markets {
#       id
#     }
#     # base
#     # quote
#     dir
#     limitPrice
#     targetSize
#     executionTimeLimitMs
#     parentOrderId
#   }
# }
# 
# 
# query GetMmStatus($orderId: OrderId!) {
#   mmAlgoStatus(orderId: $orderId) {
#     orderId
#     order {
#       name
#       orderId
#       marketId
#       # market
#       quantityBuy
#       quantitySell
#       minPosition
#       maxPosition
#       maxImproveBbo
#       positionTilt
#       referencePrice
#       refDistFrac
#       toleranceFrac
#       account
#     }
#     creationTime
#     status
#     position
#     hedgePosition
#     missRatio
#     effectiveSpread
#     buyStatus {
#       # lastDecision
#       lastOrderTime
#       lastFillTime
#       lastRejectTime
#       openOrder {
#         orderId
#         price
#         quantity
#         cancelPending
#       }
#       referencePrice
#     }
#     sellStatus {
#       # lastDecision
#       lastOrderTime
#       lastFillTime
#       lastRejectTime
#       openOrder {
#         orderId
#         price
#         quantity
#         cancelPending
#       }
#       referencePrice
#     }
#     kind
#   }
# }
# 
# 
# query GetMmOrder($orderId: OrderId!) {
#   mmAlgoOrder(orderId: $orderId) {
#     name
#     orderId
#     marketId
#     quantityBuy
#     quantitySell
#     minPosition
#     maxPosition
#     maxImproveBbo
#     positionTilt
#     referencePrice
#     refDistFrac
#     toleranceFrac
#     account
#   }
# }
# 
# 
# query GetSpreadStatus($orderId: OrderId!) {
#   spreadAlgoStatus(orderId: $orderId) {
#     orderId
#     order {
#       name
#       orderId
#       marketId
#       # market
#       quantityBuy
#       quantitySell
#       minPosition
#       maxPosition
#       maxImproveBbo
#       positionTilt
#       referencePrice
#       refDistFrac
#       toleranceFrac
#       account
#     }
#     creationTime
#     status
#     position
#     hedgePosition
#     missRatio
#     effectiveSpread
#     buyStatus {
#       # lastDecision
#       lastOrderTime
#       lastFillTime
#       lastRejectTime
#       openOrder {
#         orderId
#         price
#         quantity
#         cancelPending
#       }
#       referencePrice
#     }
#     sellStatus {
#       # lastDecision
#       lastOrderTime
#       lastFillTime
#       lastRejectTime
#       openOrder {
#         orderId
#         price
#         quantity
#         cancelPending
#       }
#       referencePrice
#     }
#     kind
#   }
# }
# 
# 
# query GetSpreadOrder($orderId: OrderId!) {
#   spreadAlgoOrder(orderId: $orderId) {
#     name
#     orderId
#     marketId
#     quantityBuy
#     quantitySell
#     minPosition
#     maxPosition
#     maxImproveBbo
#     positionTilt
#     referencePrice
#     refDistFrac
#     toleranceFrac
#     account
#   }
# }

query GetFills($venue: ExecutionVenue, $account: Uuid, $orderId: OrderId, $fromInclusive: DateTime, $toExclusive: DateTime) {
  folio {
    historicalFills(venue: $venue, account: $account, orderId: $orderId, fromInclusive: $fromInclusive, toExclusive: $toExclusive) {
      fills {
        fillId
        fillKind
        executionVenue
        exchangeFillId
        orderId
        trader
        account
        symbol
        dir
        quantity
        price
        recvTime
        tradeTime
      }
      aberrantFills {
        fillId
        fillKind
        executionVenue
        exchangeFillId
        orderId
        trader
        account
        symbol
        dir
        quantity
        price
        recvTime
        tradeTime
      }
    }
  }
}

query GetBookSnapshot($venue: MarketdataVenue!, $symbol: String!) {
  marketdata {
    l2BookSnapshot(venue: $venue, symbol: $symbol) {
      timestamp
      bids {
        price
        size
      }
      asks {
        price
        size
      }
    }
  }
}


subscription SubscribeTrades($venue: MarketdataVenue!, $symbol: String!) {
  trades(venue: $venue, symbol: $symbol) {
    timestamp
    direction
    price
    size
  }
}

subscription SubscribeCandles($venue: MarketdataVenue!, $symbol: String!, $widths: [CandleWidth!]) {
  candles(venue: $venue, symbol: $symbol, candleWidths: $widths) {
    ...CandleFields
  }
}


# mutation SendTwapAlgoRequest($algo: CreateTwapAlgo!) {
#   createTwapAlgo(twapAlgo: $algo)
# }
# 
# mutation SendPovAlgoRequest($algo: CreatePovAlgo!) {
#   createPovAlgo(povAlgo: $algo)
# }
# 
# mutation PreviewSmartOrderRouterAlgoRequest($algo: CreateSmartOrderRouterAlgo!) {
#   previewSmartOrderRouterAlgo(algo: $algo) {
#     orders {
#       ...OrderFields
#     }
#   }
# }
# 
# mutation SendSmartOrderRouterAlgoRequest($algo: CreateSmartOrderRouterAlgo!) {
#   createSmartOrderRouterAlgo(algo: $algo)
# }
# 
# 
# mutation SendMmAlgoRequest($algo: CreateMMAlgo!) {
#   createMmAlgo(mmAlgo: $algo)
# }
# 
# mutation SendSpreadAlgoRequest($algo: CreateSpreadAlgo!) {
#   createSpreadAlgo(spreadAlgo: $algo)
# }


mutation CancelOrder($orderId: OrderId!) {
  oms {
    cancelOrder(orderId: $orderId) {
      cancelId
      orderId
      recvTime
      status
      rejectReason
    }
  }
}

mutation CancelAllOrders {
  oms {
    cancelAllOrders
  }
}


mutation PlaceOrder($id: OrderId, $symbol: String!, $dir: Dir!, $quantity: Decimal!, $trader: String, $account: String, $orderType: OrderType!, $limitPrice: Decimal, $postOnly: Boolean, $triggerPrice: Decimal, $timeInForce: TimeInForce!, $goodTilDate: DateTime, $executionVenue: ExecutionVenue) {
  oms {
    placeOrder(id: $id, symbol: $symbol, dir: $dir, quantity: $quantity, trader: $trader, account: $account, orderType: $orderType, limitPrice: $limitPrice, postOnly: $postOnly, triggerPrice: $triggerPrice, timeInForce: $timeInForce, goodTilDate: $goodTilDate, executionVenue: $executionVenue) {
      ...OrderFields
    }
  }
}


subscription SubscribeOrderflow {
  orderflow {
    __typename
    ... on Order {
      ...OrderFields
    }
    ... on OrderAck {
      orderId
    }
    ... on OrderCanceled {
      orderId
      cancelId
    }
    ... on GqlOrderReject {
      orderId
      reason
      message
    }
    ... on CancelReject {
      orderId
      message
    }
    ... on Fill {
      fillOrderId: orderId
      fillId
      fillKind
      executionVenue
      exchangeFillId
      symbol
      dir
      quantity
      price
      recvTime
      tradeTime
    }
    ... on OrderOut {
      orderId
    }
    ... on OrderStale {
      orderId
    }
  }
}


mutation CreateJwt {
  createJwt
}