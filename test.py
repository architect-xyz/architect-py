# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-02-25T19:54:46+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Service(BaseModel):
    description: str
    type: List[str]


class AnyOfItem(BaseModel):
    field_ref: Optional[str] = Field(None, alias='$ref')
    type: Optional[str] = None


class Trader(BaseModel):
    description: Optional[str] = None
    anyOf: List[AnyOfItem]
    default: None = None


class AdditionalProperties1(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class AdditionalProperties(BaseModel):
    type: str
    additionalProperties: AdditionalProperties1


class ExecutionInfo(BaseModel):
    type: str
    additionalProperties: AdditionalProperties


class AdditionalProperties2(AdditionalProperties1):
    pass


class OptionsSeries(BaseModel):
    type: str
    additionalProperties: AdditionalProperties2


class AdditionalProperties4(BaseModel):
    type: str


class AdditionalProperties3(BaseModel):
    type: str
    additionalProperties: AdditionalProperties4


class ProductAliases(BaseModel):
    type: str
    additionalProperties: AdditionalProperties3


class AdditionalProperties5(AdditionalProperties1):
    pass


class Products(BaseModel):
    type: str
    additionalProperties: AdditionalProperties5


class Cutoff(BaseModel):
    description: str
    type: List[str]
    format: str


class Symbol(BaseModel):
    type: Union[str, List[str]]
    description: Optional[str] = None


class Items(AdditionalProperties4):
    pass


class Symbols(BaseModel):
    type: List[str]
    items: Items
    description: Optional[str] = None


class Venue(BaseModel):
    type: List[str]


class Items1(AdditionalProperties1):
    pass


class CandleWidths(BaseModel):
    description: str
    type: List[str]
    items: Items1


class CandleWidth(AdditionalProperties1):
    pass


class TickPeriodMs(BaseModel):
    description: str
    type: List[str]
    format: str
    minimum: float


class EndDate(BaseModel):
    type: str
    format: str


class StartDate(EndDate):
    pass


class I(BaseModel):
    type: List[str]
    format: str


class K(BaseModel):
    anyOf: List[AnyOfItem]


class N(I):
    pass


class Account(BaseModel):
    default: None = None
    anyOf: Optional[List[AnyOfItem]] = None
    field_ref: Optional[str] = Field(None, alias='$ref')
    type: Optional[List[str]] = None
    format: Optional[str] = None


class ExecutionVenue(BaseModel):
    default: None = None
    type: List[str]


class AberrantFills(BaseModel):
    default: bool
    type: str


class Fills(AberrantFills):
    pass


class Orders(AberrantFills):
    pass


class A(BaseModel):
    title: str
    default: None
    anyOf: List[AnyOfItem]


class AllOfItem(AdditionalProperties1):
    pass


class D(BaseModel):
    title: str
    allOf: List[AllOfItem]


class Id(BaseModel):
    description: Optional[str] = None
    anyOf: Optional[List[AnyOfItem]] = None
    title: Optional[str] = None
    allOf: Optional[List[AllOfItem]] = None
    type: Optional[str] = None
    format: Optional[str] = None


class Pid(BaseModel):
    title: str
    anyOf: List[AnyOfItem]


class Q(D):
    pass


class S(BaseModel):
    title: str
    type: str


class Src(A):
    pass


class Tif(D):
    pass


class U(A):
    pass


class X(BaseModel):
    title: str
    default: None
    type: List[str]


class Xid(BaseModel):
    title: str
    description: str
    default: None
    type: List[str]
    format: str


class OrderIds(BaseModel):
    type: List[str]
    items: Items1
    description: Optional[str] = None


class ParentOrderId(K):
    pass


class Items3(EndDate):
    pass


class CancelIds(BaseModel):
    type: List[str]
    items: Items3


class Items4(AdditionalProperties1):
    pass


class Accounts(BaseModel):
    type: List[str]
    items: Items4


class FromInclusive(I):
    pass


class ToExclusive(I):
    pass


class Limit(TickPeriodMs):
    pass


class OrderId(K):
    pass


class AlgoName(AdditionalProperties4):
    pass


class AlgoOrderId(BaseModel):
    anyOf: Optional[List[AnyOfItem]] = None
    field_ref: Optional[str] = Field(None, alias='$ref')


class Params(AdditionalProperties1):
    pass


class Properties(BaseModel):
    service: Optional[Service] = None
    trader: Optional[Trader] = None
    execution_info: Optional[ExecutionInfo] = None
    options_series: Optional[OptionsSeries] = None
    product_aliases: Optional[ProductAliases] = None
    products: Optional[Products] = None
    cutoff: Optional[Cutoff] = None
    symbol: Optional[Symbol] = None
    symbols: Optional[Symbols] = None
    venue: Optional[Venue] = None
    candle_widths: Optional[CandleWidths] = None
    candle_width: Optional[CandleWidth] = None
    tick_period_ms: Optional[TickPeriodMs] = None
    end_date: Optional[EndDate] = None
    start_date: Optional[StartDate] = None
    i: Optional[I] = None
    k: Optional[K] = None
    n: Optional[N] = None
    account: Optional[Account] = None
    execution_venue: Optional[ExecutionVenue] = None
    aberrant_fills: Optional[AberrantFills] = None
    fills: Optional[Fills] = None
    orders: Optional[Orders] = None
    a: Optional[A] = None
    d: Optional[D] = None
    id: Optional[Id] = None
    pid: Optional[Pid] = None
    q: Optional[Q] = None
    s: Optional[S] = None
    src: Optional[Src] = None
    tif: Optional[Tif] = None
    u: Optional[U] = None
    x: Optional[X] = None
    xid: Optional[Xid] = None
    order_ids: Optional[OrderIds] = None
    parent_order_id: Optional[ParentOrderId] = None
    cancel_ids: Optional[CancelIds] = None
    accounts: Optional[Accounts] = None
    from_inclusive: Optional[FromInclusive] = None
    to_exclusive: Optional[ToExclusive] = None
    limit: Optional[Limit] = None
    order_id: Optional[OrderId] = None
    algo_name: Optional[AlgoName] = None
    algo_order_id: Optional[AlgoOrderId] = None
    params: Optional[Params] = None


class TraderIdOrEmail(AdditionalProperties4):
    pass


class Decimal(AdditionalProperties4):
    pass


class OneOfItem(BaseModel):
    description: str
    type: str
    enum: List[str]


class DerivativeKind(BaseModel):
    oneOf: List[OneOfItem]


class Outcome(AdditionalProperties1):
    pass


class Properties2(BaseModel):
    outcome: Outcome


class Enumerated(BaseModel):
    type: str
    required: List[str]
    properties: Properties2


class Expiration(I):
    pass


class Strike(AdditionalProperties1):
    pass


class Properties3(BaseModel):
    expiration: Expiration
    strike: Strike


class OptionLike(BaseModel):
    type: str
    required: List[str]
    properties: Properties3


class Properties1(BaseModel):
    Enumerated: Optional[Enumerated] = None
    OptionLike: Optional[OptionLike] = None


class OneOfItem1(BaseModel):
    type: str
    required: List[str]
    properties: Properties1
    additionalProperties: bool


class EventContractSeriesInstance(BaseModel):
    oneOf: List[OneOfItem1]


class ExecutionVenue1(AdditionalProperties4):
    pass


class InitialMargin(K):
    pass


class IsDelisted(AdditionalProperties4):
    pass


class MaintenanceMargin(K):
    pass


class MinOrderQuantity(AdditionalProperties1):
    pass


class MinOrderQuantityUnit(AdditionalProperties1):
    pass


class StepSize(AdditionalProperties1):
    pass


class TickSize(AdditionalProperties1):
    pass


class Properties4(BaseModel):
    execution_venue: ExecutionVenue1
    initial_margin: InitialMargin
    is_delisted: IsDelisted
    maintenance_margin: MaintenanceMargin
    min_order_quantity: MinOrderQuantity
    min_order_quantity_unit: MinOrderQuantityUnit
    step_size: StepSize
    tick_size: TickSize


class ExecutionInfo1(BaseModel):
    description: str
    type: str
    required: List[str]
    properties: Properties4


class Unit(BaseModel):
    type: str
    enum: List[str]


class Properties5(BaseModel):
    unit: Unit


class OneOfItem2(BaseModel):
    type: str
    required: List[str]
    properties: Properties5


class MinOrderQuantityUnit1(BaseModel):
    oneOf: List[OneOfItem2]


class OptionsExerciseType(Unit):
    pass


class DerivativeKind1(AdditionalProperties1):
    pass


class ExerciseType(AdditionalProperties1):
    pass


class ExpirationTimeOfDay(EndDate):
    pass


class ExpirationTimeZone(AdditionalProperties1):
    pass


class IsCashSettled(AdditionalProperties4):
    pass


class Multiplier(AdditionalProperties1):
    pass


class OptionsSeries1(AdditionalProperties4):
    pass


class QuoteSymbol(AdditionalProperties4):
    pass


class AdditionalProperties6(BaseModel):
    type: str
    items: Items4
    uniqueItems: bool


class StrikesByExpiration(BaseModel):
    type: str
    additionalProperties: AdditionalProperties6


class Underlying(AdditionalProperties4):
    pass


class VenueDiscriminant(Venue):
    pass


class Properties6(BaseModel):
    derivative_kind: DerivativeKind1
    exercise_type: ExerciseType
    expiration_time_of_day: ExpirationTimeOfDay
    expiration_time_zone: ExpirationTimeZone
    is_cash_settled: IsCashSettled
    multiplier: Multiplier
    options_series: OptionsSeries1
    quote_symbol: QuoteSymbol
    strikes_by_expiration: StrikesByExpiration
    underlying: Underlying
    venue_discriminant: VenueDiscriminant


class OptionsSeriesInfo(BaseModel):
    type: str
    required: List[str]
    properties: Properties6


class Expiration1(EndDate):
    pass


class PutOrCall(AdditionalProperties1):
    pass


class Properties7(BaseModel):
    expiration: Expiration1
    put_or_call: PutOrCall
    strike: Strike


class OptionsSeriesInstance(BaseModel):
    description: str
    type: str
    required: List[str]
    properties: Properties7


class Name(AdditionalProperties4):
    pass


class Properties8(BaseModel):
    name: Name


class Outcome1(BaseModel):
    type: str
    required: List[str]
    properties: Properties8


class PriceDisplayFormat(AdditionalProperties4):
    pass


class PriceDisplayFormat1(K):
    pass


class PrimaryVenue(Venue):
    pass


class ProductType(AdditionalProperties1):
    pass


class Properties9(BaseModel):
    price_display_format: PriceDisplayFormat1
    primary_venue: PrimaryVenue
    product_type: ProductType


class ProductInfo(BaseModel):
    type: str
    required: List[str]
    properties: Properties9


class ProductType2(Unit):
    pass


class FirstNoticeDate(BaseModel):
    default: None
    type: List[str]
    format: str


class Series(BaseModel):
    type: Union[str, List[str]]


class Underlying1(Venue):
    pass


class Legs(BaseModel):
    type: str
    items: Items4


class Instance(AdditionalProperties1):
    pass


class Properties10(BaseModel):
    product_type: ProductType2
    derivative_kind: Optional[DerivativeKind1] = None
    expiration: Optional[Expiration1] = None
    first_notice_date: Optional[FirstNoticeDate] = None
    multiplier: Optional[Multiplier] = None
    series: Optional[Series] = None
    underlying: Optional[Underlying1] = None
    legs: Optional[Legs] = None
    instance: Optional[Instance] = None


class OneOfItem3(BaseModel):
    type: str
    required: List[str]
    properties: Properties10


class ProductType1(BaseModel):
    oneOf: List[OneOfItem3]


class PutOrCall1(Unit):
    pass


class Product(AdditionalProperties4):
    pass


class Quantity(BaseModel):
    description: str
    allOf: List[AllOfItem]


class Properties11(BaseModel):
    product: Product
    quantity: Quantity


class SpreadLeg(BaseModel):
    type: str
    required: List[str]
    properties: Properties11


class Simple(AdditionalProperties1):
    pass


class Item(AdditionalProperties1):
    pass


class Items7(BaseModel):
    type: str
    items: List[Item]
    maxItems: int
    minItems: int


class Thresholds(BaseModel):
    type: str
    items: Items7


class Properties13(BaseModel):
    thresholds: Thresholds


class Varying(BaseModel):
    type: str
    required: List[str]
    properties: Properties13


class Properties12(BaseModel):
    simple: Optional[Simple] = None
    varying: Optional[Varying] = None


class OneOfItem4(BaseModel):
    type: str
    required: List[str]
    properties: Properties12
    additionalProperties: bool
    description: Optional[str] = None


class TickSize1(BaseModel):
    oneOf: List[OneOfItem4]


class TimeZone(Unit):
    pass


class CandleWidth1(BaseModel):
    type: str
    enum: List[int]
    x_enumNames: List[str] = Field(..., alias='x-enumNames')


class SortTickersBy(Unit):
    pass


class AccountIdOrName(AdditionalProperties4):
    pass


class Dir(OneOfItem):
    pass


class Seqid(EndDate):
    pass


class Seqno(BaseModel):
    type: str
    format: str
    minimum: float


class Properties14(BaseModel):
    seqid: Seqid
    seqno: Seqno


class OrderId1(BaseModel):
    description: str
    type: str
    required: List[str]
    properties: Properties14


class OrderSource(CandleWidth1):
    pass


class GTD(EndDate):
    pass


class Properties15(BaseModel):
    GTD: GTD


class OneOfItem5(BaseModel):
    type: str
    enum: Optional[List[str]] = None
    required: Optional[List[str]] = None
    properties: Optional[Properties15] = None
    additionalProperties: Optional[bool] = None
    description: Optional[str] = None


class TimeInForce(BaseModel):
    oneOf: List[OneOfItem5]


class HumanDuration(AdditionalProperties4):
    pass


class Dir1(AdditionalProperties1):
    pass


class EndTime(EndDate):
    pass


class Interval(AdditionalProperties1):
    pass


class Quantity1(AdditionalProperties1):
    pass


class RejectLockout(AdditionalProperties1):
    pass


class Symbol1(AdditionalProperties4):
    pass


class TakeThroughFrac(K):
    pass


class Properties16(BaseModel):
    dir: Dir1
    end_time: EndTime
    execution_venue: ExecutionVenue1
    interval: Interval
    quantity: Quantity1
    reject_lockout: RejectLockout
    symbol: Symbol1
    take_through_frac: TakeThroughFrac


class TwapParams(BaseModel):
    type: str
    required: List[str]
    properties: Properties16


class UserId(EndDate):
    pass


class Definitions(BaseModel):
    TraderIdOrEmail: Optional[TraderIdOrEmail] = None
    Decimal: Optional[Decimal] = None
    DerivativeKind: Optional[DerivativeKind] = None
    EventContractSeriesInstance: Optional[EventContractSeriesInstance] = None
    ExecutionInfo: Optional[ExecutionInfo1] = None
    MinOrderQuantityUnit: Optional[MinOrderQuantityUnit1] = None
    OptionsExerciseType: Optional[OptionsExerciseType] = None
    OptionsSeriesInfo: Optional[OptionsSeriesInfo] = None
    OptionsSeriesInstance: Optional[OptionsSeriesInstance] = None
    Outcome: Optional[Outcome1] = None
    PriceDisplayFormat: Optional[PriceDisplayFormat] = None
    ProductInfo: Optional[ProductInfo] = None
    ProductType: Optional[ProductType1] = None
    PutOrCall: Optional[PutOrCall1] = None
    SpreadLeg: Optional[SpreadLeg] = None
    TickSize: Optional[TickSize1] = None
    TimeZone: Optional[TimeZone] = None
    CandleWidth: Optional[CandleWidth1] = None
    SortTickersBy: Optional[SortTickersBy] = None
    AccountIdOrName: Optional[AccountIdOrName] = None
    Dir: Optional[Dir] = None
    OrderId: Optional[OrderId1] = None
    OrderSource: Optional[OrderSource] = None
    TimeInForce: Optional[TimeInForce] = None
    HumanDuration: Optional[HumanDuration] = None
    TwapParams: Optional[TwapParams] = None
    UserId: Optional[UserId] = None


class K1(Unit):
    pass


class P(D):
    pass


class Po(S):
    pass


class Tp(D):
    pass


class Properties17(BaseModel):
    k: K1
    p: P
    po: Optional[Po] = None
    tp: Optional[Tp] = None


class OneOfItem7(BaseModel):
    type: str
    required: List[str]
    properties: Properties17


class A1(A):
    pass


class D1(D):
    pass


class Id1(Id):
    pass


class Pid1(Pid):
    pass


class Q1(D):
    pass


class Src1(A):
    pass


class T(Unit):
    pass


class Tif1(D):
    pass


class U1(A):
    pass


class Account1(K):
    pass


class ExecutionVenue3(Venue):
    pass


class Trader1(K):
    pass


class P1(D):
    pass


class Tp1(D):
    pass


class Properties18(BaseModel):
    a: Optional[A1] = None
    d: Optional[D1] = None
    id: Optional[Id1] = None
    pid: Optional[Pid1] = None
    q: Optional[Q1] = None
    s: Optional[S] = None
    src: Optional[Src1] = None
    t: Optional[T] = None
    tif: Optional[Tif1] = None
    u: Optional[U1] = None
    x: Optional[X] = None
    xid: Optional[Xid] = None
    account: Optional[Account1] = None
    execution_venue: Optional[ExecutionVenue3] = None
    trader: Optional[Trader1] = None
    k: Optional[K1] = None
    p: Optional[P1] = None
    po: Optional[Po] = None
    tp: Optional[Tp1] = None


class OneOfItem6(BaseModel):
    type: str
    oneOf: Optional[List[OneOfItem7]] = None
    required: List[str]
    properties: Properties18


class RequestType(BaseModel):
    field_schema: str = Field(..., alias='$schema')
    title: str
    type: Optional[str] = None
    properties: Optional[Properties] = None
    definitions: Optional[Definitions] = None
    description: Optional[str] = None
    required: Optional[List[str]] = None
    oneOf: Optional[List[OneOfItem6]] = None


class Status(AdditionalProperties1):
    pass


class Items8(AdditionalProperties1):
    pass


class Accounts1(BaseModel):
    type: str
    items: Items8


class Items9(AdditionalProperties4):
    pass


class Symbols1(BaseModel):
    type: str
    items: Items9


class AdditionalProperties8(AdditionalProperties1):
    pass


class AdditionalProperties7(BaseModel):
    type: str
    additionalProperties: AdditionalProperties8


class ExecutionInfo2(BaseModel):
    type: Optional[str] = None
    additionalProperties: Optional[AdditionalProperties7] = None
    anyOf: Optional[List[AnyOfItem]] = None


class AdditionalProperties9(AdditionalProperties1):
    pass


class OptionsSeries2(BaseModel):
    type: Optional[str] = None
    additionalProperties: Optional[AdditionalProperties9] = None
    anyOf: Optional[List[AnyOfItem]] = None


class AdditionalProperties11(AdditionalProperties4):
    pass


class AdditionalProperties10(BaseModel):
    type: str
    additionalProperties: AdditionalProperties11


class ProductAliases1(BaseModel):
    default: Optional[Dict[str, Any]] = None
    type: Optional[str] = None
    additionalProperties: Optional[AdditionalProperties10] = None
    anyOf: Optional[List[AnyOfItem]] = None


class AdditionalProperties12(AdditionalProperties1):
    pass


class Products1(BaseModel):
    type: Optional[str] = None
    additionalProperties: Optional[AdditionalProperties12] = None
    anyOf: Optional[List[AnyOfItem]] = None


class Sid(BaseModel):
    title: str
    type: str
    format: str
    minimum: float


class Sn(Sid):
    pass


class Items10(Items7):
    pass


class A2(BaseModel):
    title: str
    type: Union[str, List[str]]
    items: Optional[Union[List[Item], Items10]] = None
    maxItems: Optional[int] = None
    minItems: Optional[int] = None
    format: Optional[str] = None


class Items11(Items7):
    pass


class B(BaseModel):
    title: str
    type: Union[str, List[str]]
    items: Union[List[Item], Items11]
    maxItems: Optional[int] = None
    minItems: Optional[int] = None


class Tn(BaseModel):
    title: Optional[str] = None
    type: str
    format: str
    minimum: float


class Ts(BaseModel):
    title: Optional[str] = None
    type: str
    format: str


class Ac(Pid):
    pass


class Ah(Pid):
    pass


class Al(Pid):
    pass


class Ao(Pid):
    pass


class Av(D):
    pass


class Bc(Pid):
    pass


class Bh(Pid):
    pass


class Bl(Pid):
    pass


class Bo(Pid):
    pass


class Bv(D):
    pass


class C(Pid):
    pass


class H(Pid):
    pass


class L(Pid):
    pass


class Mc(Pid):
    pass


class Mh(Pid):
    pass


class Ml(Pid):
    pass


class Mo(Pid):
    pass


class O(BaseModel):
    title: Optional[str] = None
    anyOf: Optional[List[AnyOfItem]] = None
    allOf: Optional[List[AllOfItem]] = None
    field_ref: Optional[str] = Field(None, alias='$ref')


class V(BaseModel):
    title: str
    allOf: Optional[List[AllOfItem]] = None
    anyOf: Optional[List[AnyOfItem]] = None


class W(D):
    pass


class Items12(AdditionalProperties1):
    pass


class Candles(BaseModel):
    type: str
    items: Items12


class D2(BaseModel):
    title: str
    anyOf: Optional[List[AnyOfItem]] = None
    allOf: Optional[List[AllOfItem]] = None


class P2(V):
    pass


class Q2(V):
    pass


class IsQuoting(Venue):
    pass


class IsTrading(Venue):
    pass


class Ap(Pid):
    pass


class As(Pid):
    pass


class Bp(Pid):
    pass


class Bs(Pid):
    pass


class Dividend(K):
    pass


class DividendYield(K):
    pass


class EpsAdj(K):
    pass


class Fr(Pid):
    pass


class Ft(BaseModel):
    title: str
    type: List[str]
    format: str


class Ip(Pid):
    pass


class MarketCap(K):
    pass


class Mp(Pid):
    pass


class Oi(Pid):
    pass


class PriceToEarnings(K):
    pass


class SharesOutstandingWeightedAdj(K):
    pass


class Sp(Pid):
    pass


class Ve(S):
    pass


class Vm(Pid):
    pass


class Xh(Pid):
    pass


class Xl(Pid):
    pass


class Xo(Pid):
    pass


class Xv(Pid):
    pass


class Tickers(Candles):
    pass


class Id2(AdditionalProperties1):
    pass


class Pid2(Pid):
    pass


class R(BaseModel):
    title: Optional[str] = None
    anyOf: Optional[List[AnyOfItem]] = None
    type: Optional[List[str]] = None


class Rm(BaseModel):
    title: str
    type: List[str]


class Src2(D):
    pass


class Tif2(D):
    pass


class U2(D):
    pass


class Xp(Pid):
    pass


class Xq(D):
    pass


class Xid2(EndDate):
    pass


class OpenOrders(Candles):
    pass


class PendingCancels(Candles):
    pass


class Account2(EndDate):
    pass


class Balances(BaseModel):
    type: str
    additionalProperties: AdditionalProperties12


class CashExcess(BaseModel):
    description: str
    anyOf: List[AnyOfItem]


class Equity(K):
    pass


class PositionMargin(CashExcess):
    pass


class AdditionalProperties14(Candles):
    pass


class Positions(BaseModel):
    type: str
    additionalProperties: AdditionalProperties14


class PurchasingPower(K):
    pass


class RealizedPnl(K):
    pass


class Timestamp(EndDate):
    pass


class TotalMargin(CashExcess):
    pass


class UnrealizedPnl(K):
    pass


class YesterdayEquity(K):
    pass


class AccountSummaries(Candles):
    pass


class History(Candles):
    pass


class AberrantFills1(Candles):
    pass


class Fills1(Candles):
    pass


class Orders1(Candles):
    pass


class AlgoOrderId1(AdditionalProperties1):
    pass


class CreateTime(EndDate):
    pass


class Items22(AdditionalProperties4):
    pass


class DisplaySymbols(BaseModel):
    type: List[str]
    items: Items22


class LastError(Venue):
    pass


class LastErrorTime(I):
    pass


class ParentOrderId1(K):
    pass


class State(AdditionalProperties1):
    pass


class Trader2(AdditionalProperties1):
    pass


class Properties19(BaseModel):
    status: Optional[Status] = None
    accounts: Optional[Accounts1] = None
    symbols: Optional[Symbols1] = None
    execution_info: Optional[ExecutionInfo2] = None
    options_series: Optional[OptionsSeries2] = None
    product_aliases: Optional[ProductAliases1] = None
    products: Optional[Products1] = None
    sid: Optional[Sid] = None
    sn: Optional[Sn] = None
    a: Optional[A2] = None
    b: Optional[B] = None
    s: Optional[S] = None
    tn: Optional[Tn] = None
    ts: Optional[Ts] = None
    ac: Optional[Ac] = None
    ah: Optional[Ah] = None
    al: Optional[Al] = None
    ao: Optional[Ao] = None
    av: Optional[Av] = None
    bc: Optional[Bc] = None
    bh: Optional[Bh] = None
    bl: Optional[Bl] = None
    bo: Optional[Bo] = None
    bv: Optional[Bv] = None
    c: Optional[C] = None
    h: Optional[H] = None
    l: Optional[L] = None
    mc: Optional[Mc] = None
    mh: Optional[Mh] = None
    ml: Optional[Ml] = None
    mo: Optional[Mo] = None
    o: Optional[O] = None
    v: Optional[V] = None
    w: Optional[W] = None
    candles: Optional[Candles] = None
    d: Optional[D2] = None
    p: Optional[P2] = None
    q: Optional[Q2] = None
    is_quoting: Optional[IsQuoting] = None
    is_trading: Optional[IsTrading] = None
    ap: Optional[Ap] = None
    as_: Optional[As] = Field(None, alias='as')
    bp: Optional[Bp] = None
    bs: Optional[Bs] = None
    dividend: Optional[Dividend] = None
    dividend_yield: Optional[DividendYield] = None
    eps_adj: Optional[EpsAdj] = None
    fr: Optional[Fr] = None
    ft: Optional[Ft] = None
    ip: Optional[Ip] = None
    market_cap: Optional[MarketCap] = None
    mp: Optional[Mp] = None
    oi: Optional[Oi] = None
    price_to_earnings: Optional[PriceToEarnings] = None
    shares_outstanding_weighted_adj: Optional[SharesOutstandingWeightedAdj] = None
    sp: Optional[Sp] = None
    ve: Optional[Ve] = None
    vm: Optional[Vm] = None
    xh: Optional[Xh] = None
    xl: Optional[Xl] = None
    xo: Optional[Xo] = None
    xv: Optional[Xv] = None
    tickers: Optional[Tickers] = None
    id: Optional[Id2] = None
    pid: Optional[Pid2] = None
    r: Optional[R] = None
    rm: Optional[Rm] = None
    src: Optional[Src2] = None
    tif: Optional[Tif2] = None
    u: Optional[U2] = None
    xp: Optional[Xp] = None
    xq: Optional[Xq] = None
    xid: Optional[Xid2] = None
    open_orders: Optional[OpenOrders] = None
    pending_cancels: Optional[PendingCancels] = None
    account: Optional[Account2] = None
    balances: Optional[Balances] = None
    cash_excess: Optional[CashExcess] = None
    equity: Optional[Equity] = None
    position_margin: Optional[PositionMargin] = None
    positions: Optional[Positions] = None
    purchasing_power: Optional[PurchasingPower] = None
    realized_pnl: Optional[RealizedPnl] = None
    timestamp: Optional[Timestamp] = None
    total_margin: Optional[TotalMargin] = None
    unrealized_pnl: Optional[UnrealizedPnl] = None
    yesterday_equity: Optional[YesterdayEquity] = None
    account_summaries: Optional[AccountSummaries] = None
    history: Optional[History] = None
    aberrant_fills: Optional[AberrantFills1] = None
    fills: Optional[Fills1] = None
    orders: Optional[Orders1] = None
    algo_name: Optional[AlgoName] = None
    algo_order_id: Optional[AlgoOrderId1] = None
    create_time: Optional[CreateTime] = None
    display_symbols: Optional[DisplaySymbols] = None
    last_error: Optional[LastError] = None
    last_error_time: Optional[LastErrorTime] = None
    params: Optional[Params] = None
    parent_order_id: Optional[ParentOrderId1] = None
    state: Optional[State] = None
    trader: Optional[Trader2] = None


class HealthStatus(Unit):
    pass


class Id3(EndDate):
    pass


class Name1(AdditionalProperties1):
    pass


class Properties20(BaseModel):
    id: Id3
    name: Name1


class Account3(BaseModel):
    type: str
    required: List[str]
    properties: Properties20


class AccountName(AdditionalProperties4):
    pass


class ListModel(AdditionalProperties4):
    pass


class ReduceOrClose(AdditionalProperties4):
    pass


class SetLimits(AdditionalProperties4):
    pass


class Trade(AdditionalProperties4):
    pass


class View(AdditionalProperties4):
    pass


class Properties21(BaseModel):
    list: ListModel
    reduce_or_close: ReduceOrClose
    set_limits: SetLimits
    trade: Trade
    view: View


class AccountPermissions(BaseModel):
    description: str
    type: str
    required: List[str]
    properties: Properties21


class Account4(AdditionalProperties1):
    pass


class Permissions(AdditionalProperties1):
    pass


class Properties22(BaseModel):
    account: Account4
    permissions: Permissions
    trader: Trader2


class AccountWithPermissions(BaseModel):
    type: str
    required: List[str]
    properties: Properties22


class OneOfItem8(OneOfItem):
    pass


class DerivativeKind3(BaseModel):
    oneOf: List[OneOfItem8]


class Outcome2(AdditionalProperties1):
    pass


class Properties24(BaseModel):
    outcome: Outcome2


class Enumerated1(BaseModel):
    type: str
    required: List[str]
    properties: Properties24


class Expiration3(I):
    pass


class Properties25(BaseModel):
    expiration: Expiration3
    strike: Strike


class OptionLike1(BaseModel):
    type: str
    required: List[str]
    properties: Properties25


class Properties23(BaseModel):
    Enumerated: Optional[Enumerated1] = None
    OptionLike: Optional[OptionLike1] = None


class OneOfItem9(BaseModel):
    type: str
    required: List[str]
    properties: Properties23
    additionalProperties: bool


class EventContractSeriesInstance1(BaseModel):
    oneOf: List[OneOfItem9]


class ExecutionVenue4(AdditionalProperties4):
    pass


class InitialMargin1(K):
    pass


class MaintenanceMargin1(K):
    pass


class MinOrderQuantityUnit2(AdditionalProperties1):
    pass


class TickSize2(AdditionalProperties1):
    pass


class Properties26(BaseModel):
    execution_venue: ExecutionVenue4
    initial_margin: InitialMargin1
    is_delisted: IsDelisted
    maintenance_margin: MaintenanceMargin1
    min_order_quantity: MinOrderQuantity
    min_order_quantity_unit: MinOrderQuantityUnit2
    step_size: StepSize
    tick_size: TickSize2


class ExecutionInfo3(BaseModel):
    description: str
    type: str
    required: List[str]
    properties: Properties26


class Properties27(Properties5):
    pass


class OneOfItem10(BaseModel):
    type: str
    required: List[str]
    properties: Properties27


class MinOrderQuantityUnit3(BaseModel):
    oneOf: List[OneOfItem10]


class DerivativeKind4(AdditionalProperties1):
    pass


class OptionsSeries3(AdditionalProperties4):
    pass


class Items23(AdditionalProperties1):
    pass


class AdditionalProperties15(BaseModel):
    type: str
    items: Items23
    uniqueItems: bool


class StrikesByExpiration1(BaseModel):
    type: str
    additionalProperties: AdditionalProperties15


class Underlying2(AdditionalProperties4):
    pass


class Properties28(BaseModel):
    derivative_kind: DerivativeKind4
    exercise_type: ExerciseType
    expiration_time_of_day: ExpirationTimeOfDay
    expiration_time_zone: ExpirationTimeZone
    is_cash_settled: IsCashSettled
    multiplier: Multiplier
    options_series: OptionsSeries3
    quote_symbol: QuoteSymbol
    strikes_by_expiration: StrikesByExpiration1
    underlying: Underlying2
    venue_discriminant: VenueDiscriminant


class OptionsSeriesInfo1(BaseModel):
    type: str
    required: List[str]
    properties: Properties28


class Expiration4(EndDate):
    pass


class PutOrCall2(AdditionalProperties1):
    pass


class Properties29(BaseModel):
    expiration: Expiration4
    put_or_call: PutOrCall2
    strike: Strike


class OptionsSeriesInstance1(BaseModel):
    description: str
    type: str
    required: List[str]
    properties: Properties29


class Name2(AdditionalProperties4):
    pass


class Properties30(BaseModel):
    name: Name2


class Outcome3(BaseModel):
    type: str
    required: List[str]
    properties: Properties30


class PriceDisplayFormat2(AdditionalProperties4):
    pass


class PriceDisplayFormat3(K):
    pass


class ProductType3(AdditionalProperties1):
    pass


class Properties31(BaseModel):
    price_display_format: PriceDisplayFormat3
    primary_venue: PrimaryVenue
    product_type: ProductType3


class ProductInfo1(BaseModel):
    type: str
    required: List[str]
    properties: Properties31


class ProductType5(Unit):
    pass


class Underlying3(Venue):
    pass


class Legs1(BaseModel):
    type: str
    items: Items23


class Properties32(BaseModel):
    product_type: ProductType5
    derivative_kind: Optional[DerivativeKind4] = None
    expiration: Optional[Expiration4] = None
    first_notice_date: Optional[FirstNoticeDate] = None
    multiplier: Optional[Multiplier] = None
    series: Optional[Series] = None
    underlying: Optional[Underlying3] = None
    legs: Optional[Legs1] = None
    instance: Optional[Instance] = None


class OneOfItem11(BaseModel):
    type: str
    required: List[str]
    properties: Properties32


class ProductType4(BaseModel):
    oneOf: List[OneOfItem11]


class PutOrCall3(Unit):
    pass


class Quantity2(Quantity):
    pass


class Properties33(BaseModel):
    product: Product
    quantity: Quantity2


class SpreadLeg1(BaseModel):
    type: str
    required: List[str]
    properties: Properties33


class Items25(Items7):
    pass


class Thresholds1(BaseModel):
    type: str
    items: Items25


class Properties35(BaseModel):
    thresholds: Thresholds1


class Varying1(BaseModel):
    type: str
    required: List[str]
    properties: Properties35


class Properties34(BaseModel):
    simple: Optional[Simple] = None
    varying: Optional[Varying1] = None


class OneOfItem12(BaseModel):
    type: str
    required: List[str]
    properties: Properties34
    additionalProperties: bool
    description: Optional[str] = None


class TickSize3(BaseModel):
    oneOf: List[OneOfItem12]


class AliasKind(Unit):
    pass


class AdditionalProperties16(AdditionalProperties1):
    pass


class Snapshot(BaseModel):
    type: str
    additionalProperties: AdditionalProperties16


class Item6(BaseModel):
    field_ref: Optional[str] = Field(None, alias='$ref')
    anyOf: Optional[List[AnyOfItem]] = None


class Items26(BaseModel):
    type: str
    items: List[Item6]
    maxItems: int
    minItems: int


class Updates(BaseModel):
    type: str
    items: Items26


class Properties36(BaseModel):
    snapshot: Optional[Snapshot] = None
    updates: Optional[Updates] = None


class AnyOfItem81(BaseModel):
    type: str
    required: List[str]
    properties: Properties36


class SnapshotOrUpdateForAliasKindAndSnapshotOrUpdateForStringAndString(BaseModel):
    anyOf: List[AnyOfItem81]


class Snapshot1(Snapshot):
    pass


class AnyOfItem84(AnyOfItem):
    pass


class Item7(BaseModel):
    type: Optional[str] = None
    anyOf: Optional[List[AnyOfItem84]] = None


class Items27(BaseModel):
    type: str
    items: List[Item7]
    maxItems: int
    minItems: int


class Updates1(BaseModel):
    type: str
    items: Items27


class Properties37(BaseModel):
    snapshot: Optional[Snapshot1] = None
    updates: Optional[Updates1] = None


class AnyOfItem83(BaseModel):
    type: str
    required: List[str]
    properties: Properties37


class SnapshotOrUpdateForStringAndExecutionInfo(BaseModel):
    anyOf: List[AnyOfItem83]


class Snapshot2(Snapshot):
    pass


class AnyOfItem86(AnyOfItem):
    pass


class Item8(BaseModel):
    type: Optional[str] = None
    anyOf: Optional[List[AnyOfItem86]] = None


class Items28(BaseModel):
    type: str
    items: List[Item8]
    maxItems: int
    minItems: int


class Updates2(BaseModel):
    type: str
    items: Items28


class Properties38(BaseModel):
    snapshot: Optional[Snapshot2] = None
    updates: Optional[Updates2] = None


class AnyOfItem85(BaseModel):
    type: str
    required: List[str]
    properties: Properties38


class SnapshotOrUpdateForStringAndOptionsSeriesInfo(BaseModel):
    anyOf: List[AnyOfItem85]


class Snapshot3(Snapshot):
    pass


class AnyOfItem88(AnyOfItem):
    pass


class Item9(BaseModel):
    type: Optional[str] = None
    anyOf: Optional[List[AnyOfItem88]] = None


class Items29(BaseModel):
    type: str
    items: List[Item9]
    maxItems: int
    minItems: int


class Updates3(BaseModel):
    type: str
    items: Items29


class Properties39(BaseModel):
    snapshot: Optional[Snapshot3] = None
    updates: Optional[Updates3] = None


class AnyOfItem87(BaseModel):
    type: str
    required: List[str]
    properties: Properties39


class SnapshotOrUpdateForStringAndProductInfo(BaseModel):
    anyOf: List[AnyOfItem87]


class Snapshot4(Snapshot):
    pass


class AnyOfItem90(AnyOfItem):
    pass


class Item10(BaseModel):
    type: Optional[str] = None
    anyOf: Optional[List[AnyOfItem90]] = None


class Items30(BaseModel):
    type: str
    items: List[Item10]
    maxItems: int
    minItems: int


class Updates4(BaseModel):
    type: str
    items: Items30


class Properties40(BaseModel):
    snapshot: Optional[Snapshot4] = None
    updates: Optional[Updates4] = None


class AnyOfItem89(BaseModel):
    type: str
    required: List[str]
    properties: Properties40


class SnapshotOrUpdateForStringAndSnapshotOrUpdateForStringAndExecutionInfo(BaseModel):
    anyOf: List[AnyOfItem89]


class AdditionalProperties21(AdditionalProperties4):
    pass


class Snapshot5(BaseModel):
    type: str
    additionalProperties: AdditionalProperties21


class Item11(Series):
    pass


class Items31(BaseModel):
    type: str
    items: List[Item11]
    maxItems: int
    minItems: int


class Updates5(BaseModel):
    type: str
    items: Items31


class Properties41(BaseModel):
    snapshot: Optional[Snapshot5] = None
    updates: Optional[Updates5] = None


class AnyOfItem91(BaseModel):
    type: str
    required: List[str]
    properties: Properties41


class SnapshotOrUpdateForStringAndString(BaseModel):
    anyOf: List[AnyOfItem91]


class Item12(AdditionalProperties1):
    pass


class A3(BaseModel):
    title: str
    type: List[str]
    items: List[Item12]
    maxItems: int
    minItems: int


class B1(A3):
    pass


class Tn1(Sid):
    pass


class Ts1(BaseModel):
    title: str
    type: str
    format: str


class Properties42(BaseModel):
    a: A3
    b: B1
    s: S
    tn: Tn1
    ts: Ts1


class L1BookSnapshot(BaseModel):
    type: str
    required: List[str]
    properties: Properties42


class AnyOfItem92(AnyOfItem):
    pass


class Ac1(BaseModel):
    title: str
    anyOf: List[AnyOfItem92]


class Ah1(Ac1):
    pass


class Al1(Ac1):
    pass


class Ao1(Ac1):
    pass


class Av1(D):
    pass


class Bc1(Ac1):
    pass


class Bh1(Ac1):
    pass


class Bl1(Ac1):
    pass


class Bo1(Ac1):
    pass


class Bv1(D):
    pass


class C1(Ac1):
    pass


class H1(Ac1):
    pass


class L1(Ac1):
    pass


class Mc1(Ac1):
    pass


class Mh1(Ac1):
    pass


class Ml1(Ac1):
    pass


class Mo1(Ac1):
    pass


class O1(Ac1):
    pass


class V1(D):
    pass


class W1(D):
    pass


class Properties43(BaseModel):
    ac: Ac1
    ah: Ah1
    al: Al1
    ao: Ao1
    av: Av1
    bc: Bc1
    bh: Bh1
    bl: Bl1
    bo: Bo1
    bv: Bv1
    c: C1
    h: H1
    l: L1
    mc: Mc1
    mh: Mh1
    ml: Ml1
    mo: Mo1
    o: O1
    s: S
    tn: Tn1
    ts: Ts1
    v: V1
    w: W1


class Candle(BaseModel):
    type: str
    required: List[str]
    properties: Properties43


class Dir2(OneOfItem):
    pass


class Ap1(Ac1):
    pass


class As1(Ac1):
    pass


class Bp1(Ac1):
    pass


class Bs1(Ac1):
    pass


class Dividend1(BaseModel):
    anyOf: List[AnyOfItem92]


class DividendYield1(Dividend1):
    pass


class EpsAdj1(Dividend1):
    pass


class Fr1(Ac1):
    pass


class H2(Ac1):
    pass


class Ip1(Ac1):
    pass


class L2(Ac1):
    pass


class MarketCap1(Dividend1):
    pass


class Mp1(Ac1):
    pass


class O2(Ac1):
    pass


class Oi1(Ac1):
    pass


class P3(Ac1):
    pass


class PriceToEarnings1(Dividend1):
    pass


class Q3(Ac1):
    pass


class SharesOutstandingWeightedAdj1(Dividend1):
    pass


class Sp1(Ac1):
    pass


class V2(Ac1):
    pass


class Vm1(Ac1):
    pass


class Xh1(Ac1):
    pass


class Xl1(Ac1):
    pass


class Xo1(Ac1):
    pass


class Xv1(Ac1):
    pass


class Properties44(BaseModel):
    ap: Ap1
    as_: As1 = Field(..., alias='as')
    bp: Bp1
    bs: Bs1
    dividend: Dividend1
    dividend_yield: DividendYield1
    eps_adj: EpsAdj1
    fr: Fr1
    ft: Ft
    h: H2
    ip: Ip1
    l: L2
    market_cap: MarketCap1
    mp: Mp1
    o: O2
    oi: Oi1
    p: P3
    price_to_earnings: PriceToEarnings1
    q: Q3
    s: S
    shares_outstanding_weighted_adj: SharesOutstandingWeightedAdj1
    sp: Sp1
    tn: Tn1
    ts: Ts1
    v: V2
    ve: Ve
    vm: Vm1
    xh: Xh1
    xl: Xl1
    xo: Xo1
    xv: Xv1


class Ticker(BaseModel):
    type: str
    required: List[str]
    properties: Properties44


class CancelStatus(CandleWidth1):
    pass


class FillKind(CandleWidth1):
    pass


class Properties45(Properties14):
    pass


class OrderId2(BaseModel):
    description: str
    type: str
    required: List[str]
    properties: Properties45


class OrderRejectReason(Unit):
    pass


class OrderStatus(CandleWidth1):
    pass


class Properties46(Properties15):
    pass


class OneOfItem13(BaseModel):
    type: str
    enum: Optional[List[str]] = None
    required: Optional[List[str]] = None
    properties: Optional[Properties46] = None
    additionalProperties: Optional[bool] = None
    description: Optional[str] = None


class TimeInForce1(BaseModel):
    oneOf: List[OneOfItem13]


class P4(D):
    pass


class Tp2(D):
    pass


class Properties47(BaseModel):
    k: K1
    p: P4
    po: Optional[Po] = None
    tp: Optional[Tp2] = None


class OneOfItem14(BaseModel):
    type: str
    required: List[str]
    properties: Properties47


class A4(Ts1):
    pass


class D3(D):
    pass


class Id4(AdditionalProperties1):
    pass


class O3(D):
    pass


class Pid3(Ac1):
    pass


class Q4(D):
    pass


class R1(Ac1):
    pass


class Src3(D):
    pass


class Tif3(D):
    pass


class U3(D):
    pass


class Xp1(Ac1):
    pass


class Xq1(D):
    pass


class Properties48(BaseModel):
    a: A4
    d: D3
    id: Id4
    o: O3
    pid: Pid3
    q: Q4
    r: R1
    rm: Rm
    s: S
    src: Src3
    tif: Tif3
    tn: Tn1
    ts: Ts1
    u: U3
    ve: Ve
    xp: Xp1
    xq: Xq1


class Order(BaseModel):
    type: str
    oneOf: List[OneOfItem14]
    required: List[str]
    properties: Properties48


class O4(AdditionalProperties1):
    pass


class R2(Venue):
    pass


class Tn5(Seqno):
    pass


class Ts5(EndDate):
    pass


class Properties49(BaseModel):
    id: Id4
    o: O4
    r: R2
    tn: Tn5
    ts: Ts5
    xid: Xid2


class Cancel(BaseModel):
    type: str
    required: List[str]
    properties: Properties49


class BreakEvenPrice(Dividend1):
    pass


class CostBasis(Dividend1):
    pass


class LiquidationPrice(Dividend1):
    pass


class Quantity3(AdditionalProperties1):
    pass


class TradeTime(Cutoff):
    pass


class Properties50(BaseModel):
    break_even_price: BreakEvenPrice
    cost_basis: CostBasis
    liquidation_price: LiquidationPrice
    quantity: Quantity3
    trade_time: TradeTime


class AccountPosition(BaseModel):
    type: str
    required: List[str]
    properties: Properties50


class Account5(EndDate):
    pass


class AdditionalProperties22(AdditionalProperties1):
    pass


class Balances1(BaseModel):
    type: str
    additionalProperties: AdditionalProperties22


class CashExcess1(BaseModel):
    description: str
    anyOf: List[AnyOfItem92]


class Equity1(Dividend1):
    pass


class PositionMargin1(CashExcess1):
    pass


class Items32(AdditionalProperties1):
    pass


class AdditionalProperties23(BaseModel):
    type: str
    items: Items32


class Positions1(BaseModel):
    type: str
    additionalProperties: AdditionalProperties23


class PurchasingPower1(Dividend1):
    pass


class RealizedPnl1(Dividend1):
    pass


class TotalMargin1(CashExcess1):
    pass


class UnrealizedPnl1(Dividend1):
    pass


class YesterdayEquity1(Dividend1):
    pass


class Properties51(BaseModel):
    account: Account5
    balances: Balances1
    cash_excess: CashExcess1
    equity: Equity1
    position_margin: PositionMargin1
    positions: Positions1
    purchasing_power: PurchasingPower1
    realized_pnl: RealizedPnl1
    timestamp: Timestamp
    total_margin: TotalMargin1
    unrealized_pnl: UnrealizedPnl1
    yesterday_equity: YesterdayEquity1


class AccountSummary(BaseModel):
    type: str
    required: List[str]
    properties: Properties51


class A5(Ft):
    pass


class Atn(BaseModel):
    title: str
    type: List[str]
    format: str
    minimum: float


class Ats(Ft):
    pass


class D4(Ac1):
    pass


class F(Ac1):
    pass


class Fu(Rm):
    pass


class Id6(Ts1):
    pass


class K4(Ac1):
    pass


class Oid(Ac1):
    pass


class P5(Ac1):
    pass


class Q5(Ac1):
    pass


class S7(Rm):
    pass


class Tn6(Atn):
    pass


class Ts6(Ft):
    pass


class U4(Ac1):
    pass


class X2(S):
    pass


class Xid4(Rm):
    pass


class Properties52(BaseModel):
    a: A5
    atn: Atn
    ats: Ats
    d: D4
    f: F
    fu: Fu
    id: Id6
    k: K4
    oid: Oid
    p: P5
    q: Q5
    s: S7
    tn: Tn6
    ts: Ts6
    u: U4
    x: X2
    xid: Xid4


class AberrantFill(BaseModel):
    description: str
    type: str
    required: List[str]
    properties: Properties52


class Ats1(BaseModel):
    title: str
    description: str
    type: List[str]
    format: str


class D5(D):
    pass


class F1(Ac1):
    pass


class Fu1(BaseModel):
    title: str
    description: str
    type: List[str]


class K5(D):
    pass


class Oid1(Ac1):
    pass


class P6(D):
    pass


class Q6(D):
    pass


class S8(S):
    pass


class T1(BaseModel):
    title: str
    default: None
    type: str
    format: str


class Tn7(Sid):
    pass


class Ts7(BaseModel):
    title: str
    description: str
    type: str
    format: str


class U5(Ac1):
    pass


class Properties53(BaseModel):
    a: A5
    atn: Atn
    ats: Ats1
    d: D5
    f: F1
    fu: Fu1
    id: Id6
    k: K5
    oid: Oid1
    p: P6
    q: Q6
    s: S8
    t: T1
    tn: Tn7
    ts: Ts7
    u: U5
    x: X2
    xid: Xid4


class Fill(BaseModel):
    type: str
    required: List[str]
    properties: Properties53


class AlgoState(Unit):
    pass


class Dir3(AdditionalProperties1):
    pass


class TakeThroughFrac1(Dividend1):
    pass


class Properties54(BaseModel):
    dir: Dir3
    end_time: EndTime
    execution_venue: ExecutionVenue4
    interval: Interval
    quantity: Quantity3
    reject_lockout: RejectLockout
    symbol: Symbol1
    take_through_frac: TakeThroughFrac1


class TwapParams1(BaseModel):
    type: str
    required: List[str]
    properties: Properties54


class QuantityFilled(AdditionalProperties1):
    pass


class RealizedTwap(Dividend1):
    pass


class Properties55(BaseModel):
    quantity_filled: QuantityFilled
    realized_twap: RealizedTwap


class TwapStatus(BaseModel):
    type: str
    required: List[str]
    properties: Properties55


class Definitions1(BaseModel):
    HealthStatus: Optional[HealthStatus] = None
    Account: Optional[Account3] = None
    AccountName: Optional[AccountName] = None
    AccountPermissions: Optional[AccountPermissions] = None
    AccountWithPermissions: Optional[AccountWithPermissions] = None
    UserId: Optional[UserId] = None
    Decimal: Optional[Decimal] = None
    DerivativeKind: Optional[DerivativeKind3] = None
    EventContractSeriesInstance: Optional[EventContractSeriesInstance1] = None
    ExecutionInfo: Optional[ExecutionInfo3] = None
    MinOrderQuantityUnit: Optional[MinOrderQuantityUnit3] = None
    OptionsExerciseType: Optional[OptionsExerciseType] = None
    OptionsSeriesInfo: Optional[OptionsSeriesInfo1] = None
    OptionsSeriesInstance: Optional[OptionsSeriesInstance1] = None
    Outcome: Optional[Outcome3] = None
    PriceDisplayFormat: Optional[PriceDisplayFormat2] = None
    ProductInfo: Optional[ProductInfo1] = None
    ProductType: Optional[ProductType4] = None
    PutOrCall: Optional[PutOrCall3] = None
    SpreadLeg: Optional[SpreadLeg1] = None
    TickSize: Optional[TickSize3] = None
    TimeZone: Optional[TimeZone] = None
    AliasKind: Optional[AliasKind] = None
    SnapshotOrUpdate_for_AliasKind_and_SnapshotOrUpdate_for_String_and_String: Optional[
        SnapshotOrUpdateForAliasKindAndSnapshotOrUpdateForStringAndString
    ] = None
    SnapshotOrUpdate_for_String_and_ExecutionInfo: Optional[
        SnapshotOrUpdateForStringAndExecutionInfo
    ] = None
    SnapshotOrUpdate_for_String_and_OptionsSeriesInfo: Optional[
        SnapshotOrUpdateForStringAndOptionsSeriesInfo
    ] = None
    SnapshotOrUpdate_for_String_and_ProductInfo: Optional[
        SnapshotOrUpdateForStringAndProductInfo
    ] = None
    SnapshotOrUpdate_for_String_and_SnapshotOrUpdate_for_String_and_ExecutionInfo: (
        Optional[SnapshotOrUpdateForStringAndSnapshotOrUpdateForStringAndExecutionInfo]
    ) = (None)
    SnapshotOrUpdate_for_String_and_String: Optional[
        SnapshotOrUpdateForStringAndString
    ] = None
    L1BookSnapshot: Optional[L1BookSnapshot] = None
    CandleWidth: Optional[CandleWidth1] = None
    Candle: Optional[Candle] = None
    Dir: Optional[Dir2] = None
    Ticker: Optional[Ticker] = None
    CancelStatus: Optional[CancelStatus] = None
    FillKind: Optional[FillKind] = None
    OrderId: Optional[OrderId2] = None
    OrderRejectReason: Optional[OrderRejectReason] = None
    OrderSource: Optional[OrderSource] = None
    OrderStatus: Optional[OrderStatus] = None
    TimeInForce: Optional[TimeInForce1] = None
    Order: Optional[Order] = None
    Cancel: Optional[Cancel] = None
    AccountPosition: Optional[AccountPosition] = None
    AccountSummary: Optional[AccountSummary] = None
    AberrantFill: Optional[AberrantFill] = None
    Fill: Optional[Fill] = None
    AlgoState: Optional[AlgoState] = None
    HumanDuration: Optional[HumanDuration] = None
    TwapParams: Optional[TwapParams1] = None
    TwapStatus: Optional[TwapStatus] = None


class Items34(BaseModel):
    type: str
    items: List[Item12]
    maxItems: int
    minItems: int


class A7(BaseModel):
    title: str
    type: Union[str, List[str]]
    items: Optional[Items34] = None
    description: Optional[str] = None
    format: Optional[str] = None


class Items35(Items34):
    pass


class B2(BaseModel):
    title: str
    type: str
    items: Items35
    description: Optional[str] = None


class T2(BaseModel):
    type: str
    enum: Optional[List[str]] = None
    title: Optional[str] = None
    default: None = None
    format: Optional[str] = None


class Tn8(BaseModel):
    title: Optional[str] = None
    type: Union[str, List[str]]
    format: str
    minimum: float


class Ts8(BaseModel):
    title: Optional[str] = None
    type: Union[str, List[str]]
    format: str
    description: Optional[str] = None


class Ap2(Ac1):
    pass


class As2(Ac1):
    pass


class Bp2(Ac1):
    pass


class Bs2(Ac1):
    pass


class Dividend2(Dividend1):
    pass


class DividendYield2(Dividend1):
    pass


class EpsAdj2(Dividend1):
    pass


class Fr2(Ac1):
    pass


class H3(Ac1):
    pass


class Ip2(Ac1):
    pass


class L3(Ac1):
    pass


class MarketCap2(Dividend1):
    pass


class Mp2(Ac1):
    pass


class O5(BaseModel):
    title: Optional[str] = None
    anyOf: Optional[List[AnyOfItem92]] = None
    allOf: Optional[List[AllOfItem]] = None
    field_ref: Optional[str] = Field(None, alias='$ref')


class Oi2(Ac1):
    pass


class P7(BaseModel):
    title: str
    anyOf: Optional[List[AnyOfItem92]] = None
    allOf: Optional[List[AllOfItem]] = None


class PriceToEarnings2(Dividend1):
    pass


class Q7(P7):
    pass


class S9(BaseModel):
    title: str
    type: Union[str, List[str]]


class SharesOutstandingWeightedAdj2(Dividend1):
    pass


class Sp2(Ac1):
    pass


class V3(Ac1):
    pass


class Vm2(Ac1):
    pass


class Xh2(Ac1):
    pass


class Xl2(Ac1):
    pass


class Xo2(Ac1):
    pass


class Xv2(Ac1):
    pass


class D6(BaseModel):
    title: str
    allOf: Optional[List[AllOfItem]] = None
    anyOf: Optional[List[AnyOfItem92]] = None


class Id8(BaseModel):
    field_ref: Optional[str] = Field(None, alias='$ref')
    title: Optional[str] = None
    type: Optional[str] = None
    format: Optional[str] = None


class Pid4(Ac1):
    pass


class R3(BaseModel):
    title: Optional[str] = None
    anyOf: Optional[List[AnyOfItem92]] = None
    field_ref: Optional[str] = Field(None, alias='$ref')
    type: Optional[List[str]] = None


class Rm2(BaseModel):
    title: Optional[str] = None
    type: List[str]


class Src4(D):
    pass


class Tif4(D):
    pass


class U6(D6):
    pass


class Xp2(Ac1):
    pass


class Xq2(D):
    pass


class Xid6(BaseModel):
    type: Union[str, List[str]]
    format: Optional[str] = None
    title: Optional[str] = None


class Ats2(BaseModel):
    title: str
    description: Optional[str] = None
    type: List[str]
    format: str


class F2(Ac1):
    pass


class Fu2(BaseModel):
    title: str
    description: Optional[str] = None
    type: List[str]


class K6(BaseModel):
    title: Optional[str] = None
    allOf: Optional[List[AllOfItem]] = None
    anyOf: Optional[List[AnyOfItem92]] = None
    type: Optional[str] = None
    enum: Optional[List[str]] = None


class Oid2(Ac1):
    pass


class Tp3(D):
    pass


class Properties56(BaseModel):
    a: Optional[A7] = None
    b: Optional[B2] = None
    sid: Optional[Sid] = None
    sn: Optional[Sn] = None
    t: Optional[T2] = None
    tn: Optional[Tn8] = None
    ts: Optional[Ts8] = None
    ap: Optional[Ap2] = None
    as_: Optional[As2] = Field(None, alias='as')
    bp: Optional[Bp2] = None
    bs: Optional[Bs2] = None
    dividend: Optional[Dividend2] = None
    dividend_yield: Optional[DividendYield2] = None
    eps_adj: Optional[EpsAdj2] = None
    fr: Optional[Fr2] = None
    ft: Optional[Ft] = None
    h: Optional[H3] = None
    ip: Optional[Ip2] = None
    l: Optional[L3] = None
    market_cap: Optional[MarketCap2] = None
    mp: Optional[Mp2] = None
    o: Optional[O5] = None
    oi: Optional[Oi2] = None
    p: Optional[P7] = None
    price_to_earnings: Optional[PriceToEarnings2] = None
    q: Optional[Q7] = None
    s: Optional[S9] = None
    shares_outstanding_weighted_adj: Optional[SharesOutstandingWeightedAdj2] = None
    sp: Optional[Sp2] = None
    v: Optional[V3] = None
    ve: Optional[Ve] = None
    vm: Optional[Vm2] = None
    xh: Optional[Xh2] = None
    xl: Optional[Xl2] = None
    xo: Optional[Xo2] = None
    xv: Optional[Xv2] = None
    d: Optional[D6] = None
    id: Optional[Id8] = None
    pid: Optional[Pid4] = None
    r: Optional[R3] = None
    rm: Optional[Rm2] = None
    src: Optional[Src4] = None
    tif: Optional[Tif4] = None
    u: Optional[U6] = None
    xp: Optional[Xp2] = None
    xq: Optional[Xq2] = None
    xid: Optional[Xid6] = None
    atn: Optional[Atn] = None
    ats: Optional[Ats2] = None
    f: Optional[F2] = None
    fu: Optional[Fu2] = None
    k: Optional[K6] = None
    oid: Optional[Oid2] = None
    x: Optional[X2] = None
    po: Optional[Po] = None
    tp: Optional[Tp3] = None


class K7(Unit):
    pass


class P8(D):
    pass


class Tp4(D):
    pass


class Properties57(BaseModel):
    k: K7
    p: P8
    po: Optional[Po] = None
    tp: Optional[Tp4] = None


class OneOfItem16(BaseModel):
    type: str
    required: List[str]
    properties: Properties57


class OneOfItem15(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    type: str
    required: List[str]
    properties: Properties56
    oneOf: Optional[List[OneOfItem16]] = None


class ResponseType(BaseModel):
    field_schema: str = Field(..., alias='$schema')
    title: str
    type: Optional[str] = None
    required: Optional[List[str]] = None
    properties: Optional[Properties19] = None
    definitions: Optional[Definitions1] = None
    description: Optional[str] = None
    items: Optional[Items32] = None
    oneOf: Optional[List[OneOfItem15]] = None


class Rpc(BaseModel):
    type: str
    route: str
    request_type: RequestType
    response_type: ResponseType


class ModelItem(BaseModel):
    field_schema: str = Field(..., alias='$schema')
    name: str
    rpcs: List[Rpc]


class Model(BaseModel):
    __root__: List[ModelItem]
